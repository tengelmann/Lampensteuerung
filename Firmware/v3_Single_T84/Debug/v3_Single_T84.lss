
v3_Single_T84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cd4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00001cd4  00001d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008000d4  008000d4  00001dfc  2**0
                  ALLOC
  3 .eeprom       000000fe  00810000  00810000  00001dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001a70  00000000  00000000  00001efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000008ae  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000180  00000000  00000000  0000421a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000bd9  00000000  00000000  0000439a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001f95  00000000  00000000  00004f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000add  00000000  00000000  00006f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000024e2  00000000  00000000  000079e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004d0  00000000  00000000  00009ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000009d5  00000000  00000000  0000a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000002e2  00000000  00000000  0000ad6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	5c c3       	rjmp	.+1720   	; 0x6be <__vector_2>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	7f cc       	rjmp	.-1794   	; 0xfffff916 <__eeprom_end+0xff7ef818>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e4 ed       	ldi	r30, 0xD4	; 212
      36:	fc e1       	ldi	r31, 0x1C	; 28
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	a4 3d       	cpi	r26, 0xD4	; 212
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
      44:	10 e0       	ldi	r17, 0x00	; 0
      46:	a4 ed       	ldi	r26, 0xD4	; 212
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	ac 3f       	cpi	r26, 0xFC	; 252
      50:	b1 07       	cpc	r27, r17
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	68 d3       	rcall	.+1744   	; 0x726 <main>
      56:	3c ce       	rjmp	.-904    	; 0xfffffcd0 <__eeprom_end+0xff7efbd2>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <accuInitialize>:

uint_adc   accuVoltageLevels[VOLT_LEVELS];
uint_adc eeAccuVoltageLevels[VOLT_LEVELS] EEMEM = {	DEF_VOLT_0030, 	DEF_VOLT_0100,	DEF_VOLT_0130, 	DEF_VOLT_0200,	DEF_VOLT_0230, 	DEF_VOLT_0300,	DEF_VOLT_0330,	DEF_VOLT_0400};

void accuInitialize(void)
{
      5a:	df 93       	push	r29
      5c:	cf 93       	push	r28
      5e:	cd b7       	in	r28, 0x3d	; 61
      60:	de b7       	in	r29, 0x3e	; 62
	accuDisplayEnabled = 0;
      62:	10 92 d4 00 	sts	0x00D4, r1
}
      66:	cf 91       	pop	r28
      68:	df 91       	pop	r29
      6a:	08 95       	ret

0000006c <accuLoadVoltageLevelsFromEEPROM>:

void accuLoadVoltageLevelsFromEEPROM()
{
      6c:	df 93       	push	r29
      6e:	cf 93       	push	r28
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
	eeprom_read_block(accuVoltageLevels, eeAccuVoltageLevels, sizeof(eeAccuVoltageLevels));
      74:	8e ed       	ldi	r24, 0xDE	; 222
      76:	90 e0       	ldi	r25, 0x00	; 0
      78:	20 e0       	ldi	r18, 0x00	; 0
      7a:	30 e0       	ldi	r19, 0x00	; 0
      7c:	b9 01       	movw	r22, r18
      7e:	40 e1       	ldi	r20, 0x10	; 16
      80:	50 e0       	ldi	r21, 0x00	; 0
      82:	ef dd       	rcall	.-1058   	; 0xfffffc62 <__eeprom_end+0xff7efb64>
}
      84:	cf 91       	pop	r28
      86:	df 91       	pop	r29
      88:	08 95       	ret

0000008a <accuStoreVoltageLevelsToEEPROM>:

void accuStoreVoltageLevelsToEEPROM()
{
      8a:	df 93       	push	r29
      8c:	cf 93       	push	r28
      8e:	cd b7       	in	r28, 0x3d	; 61
      90:	de b7       	in	r29, 0x3e	; 62
	eeprom_write_block(accuVoltageLevels, eeAccuVoltageLevels, sizeof(eeAccuVoltageLevels));
      92:	8e ed       	ldi	r24, 0xDE	; 222
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	20 e0       	ldi	r18, 0x00	; 0
      98:	30 e0       	ldi	r19, 0x00	; 0
      9a:	b9 01       	movw	r22, r18
      9c:	40 e1       	ldi	r20, 0x10	; 16
      9e:	50 e0       	ldi	r21, 0x00	; 0
      a0:	fd dd       	rcall	.-1030   	; 0xfffffc9c <__eeprom_end+0xff7efb9e>
}
      a2:	cf 91       	pop	r28
      a4:	df 91       	pop	r29
      a6:	08 95       	ret

000000a8 <accuGetVoltageLevelIndex>:

uint8_t accuGetVoltageLevelIndex()
{
      a8:	df 93       	push	r29
      aa:	cf 93       	push	r28
      ac:	00 d0       	rcall	.+0      	; 0xae <accuGetVoltageLevelIndex+0x6>
      ae:	0f 92       	push	r0
      b0:	cd b7       	in	r28, 0x3d	; 61
      b2:	de b7       	in	r29, 0x3e	; 62
	uint_adc adcValue = currentADCValue;
      b4:	80 91 ee 00 	lds	r24, 0x00EE
      b8:	90 91 ef 00 	lds	r25, 0x00EF
      bc:	9b 83       	std	Y+3, r25	; 0x03
      be:	8a 83       	std	Y+2, r24	; 0x02
	uart_send_linefeed();*/


	//returns 0(leer) bis 7 
	uint8_t i;
	for (i = 0; i < VOLT_LEVELS; i++)
      c0:	19 82       	std	Y+1, r1	; 0x01
      c2:	14 c0       	rjmp	.+40     	; 0xec <accuGetVoltageLevelIndex+0x44>
	{
		//av[0] ist der kleinste Spannungswert
		if (adcValue < accuVoltageLevels[i]) return i;
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	88 2f       	mov	r24, r24
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	82 52       	subi	r24, 0x22	; 34
      d0:	9f 4f       	sbci	r25, 0xFF	; 255
      d2:	fc 01       	movw	r30, r24
      d4:	20 81       	ld	r18, Z
      d6:	31 81       	ldd	r19, Z+1	; 0x01
      d8:	8a 81       	ldd	r24, Y+2	; 0x02
      da:	9b 81       	ldd	r25, Y+3	; 0x03
      dc:	82 17       	cp	r24, r18
      de:	93 07       	cpc	r25, r19
      e0:	10 f4       	brcc	.+4      	; 0xe6 <accuGetVoltageLevelIndex+0x3e>
      e2:	89 81       	ldd	r24, Y+1	; 0x01
      e4:	07 c0       	rjmp	.+14     	; 0xf4 <accuGetVoltageLevelIndex+0x4c>
	uart_send_linefeed();*/


	//returns 0(leer) bis 7 
	uint8_t i;
	for (i = 0; i < VOLT_LEVELS; i++)
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	8f 5f       	subi	r24, 0xFF	; 255
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	88 30       	cpi	r24, 0x08	; 8
      f0:	48 f3       	brcs	.-46     	; 0xc4 <accuGetVoltageLevelIndex+0x1c>
	{
		//av[0] ist der kleinste Spannungswert
		if (adcValue < accuVoltageLevels[i]) return i;
	}

	return VOLT_LEVELS;
      f2:	88 e0       	ldi	r24, 0x08	; 8
}
      f4:	0f 90       	pop	r0
      f6:	0f 90       	pop	r0
      f8:	0f 90       	pop	r0
      fa:	cf 91       	pop	r28
      fc:	df 91       	pop	r29
      fe:	08 95       	ret

00000100 <accuRefreshDisplay>:
		- AkkuSpannung messen
		- Kapazität abschätzen
		- LED-Anzeigen setzen
*/
void accuRefreshDisplay(void)
{
     100:	df 93       	push	r29
     102:	cf 93       	push	r28
     104:	0f 92       	push	r0
     106:	cd b7       	in	r28, 0x3d	; 61
     108:	de b7       	in	r29, 0x3e	; 62
	//Wenn nicht aktiv, dann raus hier...
	if (!accuDisplayEnabled) return;
     10a:	80 91 d4 00 	lds	r24, 0x00D4
     10e:	88 23       	and	r24, r24
     110:	61 f0       	breq	.+24     	; 0x12a <accuRefreshDisplay+0x2a>


	//Index für Anzeige über Vergleich aus der VoltageTable holen
	uint8_t voltIndex = accuGetVoltageLevelIndex();
     112:	ca df       	rcall	.-108    	; 0xa8 <accuGetVoltageLevelIndex>
     114:	89 83       	std	Y+1, r24	; 0x01

	led2Mode = LED_ON;
     116:	66 24       	eor	r6, r6
     118:	63 94       	inc	r6
	
	//Ledfarben sind passend vorsortiert
	//Bei unter 30min wird geblinkt und die Leds nicht mehr gedimmt
	if ((led2ColorIndex = voltIndex) == 0)
     11a:	79 80       	ldd	r7, Y+1	; 0x01
     11c:	87 2d       	mov	r24, r7
     11e:	88 23       	and	r24, r24
     120:	29 f4       	brne	.+10     	; 0x12c <accuRefreshDisplay+0x2c>
	{ 
		led2Mode = LED_BLINK;
     122:	66 24       	eor	r6, r6
     124:	68 94       	set
     126:	61 f8       	bld	r6, 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <accuRefreshDisplay+0x2c>
		- LED-Anzeigen setzen
*/
void accuRefreshDisplay(void)
{
	//Wenn nicht aktiv, dann raus hier...
	if (!accuDisplayEnabled) return;
     12a:	00 00       	nop

/*	uart_putc('v');
	uart_putc('i');
	uart_send_int(voltIndex);	
	uart_send_linefeed();*/
}
     12c:	0f 90       	pop	r0
     12e:	cf 91       	pop	r28
     130:	df 91       	pop	r29
     132:	08 95       	ret

00000134 <accuSetDefaultVoltageLevels>:

//Spannungswerte für Akkuanzeige auf die Standardwerte zurücksetzen
void accuSetDefaultVoltageLevels(void) {
     134:	df 93       	push	r29
     136:	cf 93       	push	r28
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
	accuVoltageLevels[0] = DEF_VOLT_0030;
     13c:	8f e9       	ldi	r24, 0x9F	; 159
     13e:	92 e0       	ldi	r25, 0x02	; 2
     140:	90 93 df 00 	sts	0x00DF, r25
     144:	80 93 de 00 	sts	0x00DE, r24
	accuVoltageLevels[1] = DEF_VOLT_0100;
     148:	8a ea       	ldi	r24, 0xAA	; 170
     14a:	92 e0       	ldi	r25, 0x02	; 2
     14c:	90 93 e1 00 	sts	0x00E1, r25
     150:	80 93 e0 00 	sts	0x00E0, r24
	accuVoltageLevels[2] = DEF_VOLT_0130;
     154:	83 eb       	ldi	r24, 0xB3	; 179
     156:	92 e0       	ldi	r25, 0x02	; 2
     158:	90 93 e3 00 	sts	0x00E3, r25
     15c:	80 93 e2 00 	sts	0x00E2, r24
	accuVoltageLevels[3] = DEF_VOLT_0200;
     160:	82 ec       	ldi	r24, 0xC2	; 194
     162:	92 e0       	ldi	r25, 0x02	; 2
     164:	90 93 e5 00 	sts	0x00E5, r25
     168:	80 93 e4 00 	sts	0x00E4, r24
	accuVoltageLevels[4] = DEF_VOLT_0230;
     16c:	87 ed       	ldi	r24, 0xD7	; 215
     16e:	92 e0       	ldi	r25, 0x02	; 2
     170:	90 93 e7 00 	sts	0x00E7, r25
     174:	80 93 e6 00 	sts	0x00E6, r24
	accuVoltageLevels[5] = DEF_VOLT_0300;
     178:	88 ef       	ldi	r24, 0xF8	; 248
     17a:	92 e0       	ldi	r25, 0x02	; 2
     17c:	90 93 e9 00 	sts	0x00E9, r25
     180:	80 93 e8 00 	sts	0x00E8, r24
	accuVoltageLevels[6] = DEF_VOLT_0330;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	9f ef       	ldi	r25, 0xFF	; 255
     188:	90 93 eb 00 	sts	0x00EB, r25
     18c:	80 93 ea 00 	sts	0x00EA, r24
	accuVoltageLevels[7] = DEF_VOLT_0400;
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	9f ef       	ldi	r25, 0xFF	; 255
     194:	90 93 ed 00 	sts	0x00ED, r25
     198:	80 93 ec 00 	sts	0x00EC, r24
}
     19c:	cf 91       	pop	r28
     19e:	df 91       	pop	r29
     1a0:	08 95       	ret

000001a2 <adcInitialize>:
 * Initialisierung
 * Wandlerfrequenz, Ref-Spannung, Mux-Kanal, Pin als Input
 * 
 ***************************************************************************/
void adcInitialize(void)
{
     1a2:	df 93       	push	r29
     1a4:	cf 93       	push	r28
     1a6:	0f 92       	push	r0
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
	   8Mhz/50kHz = 160
	   Prescaler 128 =>  62,5khz
	   Prescaler  64 => 125,0khz
	*/

	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     1ac:	86 e2       	ldi	r24, 0x26	; 38
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	27 e8       	ldi	r18, 0x87	; 135
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 83       	st	Z, r18
	#ifdef ADC_LOW_RES
		ADCSRB = (1 << ADLAR); //Left-Aligned bei Low-Res
	#else
		ADCSRB = (0 << ADLAR);
     1b6:	83 e2       	ldi	r24, 0x23	; 35
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	10 82       	st	Z, r1
	//ADMUX = (0<<REFS1)|(0<<REFS0)|(1<<MUX5)|(0<<MUX4)|(0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0); 
	//ADCSRA |= (1 << ADSC); loop_until_bit_is_set(ADCSRA, ADSC); 
	//ADCSRA |= (1 << ADSC); loop_until_bit_is_set(ADCSRA, ADSC); 
	//uint8_t offset = ADCH; 

	ADMUX  = MUXVOLT;
     1be:	87 e2       	ldi	r24, 0x27	; 39
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	fc 01       	movw	r30, r24
     1c4:	10 82       	st	Z, r1

	//Pin als Input ohne Pull-Up
	DDRA  &= ~(1 << ADC_PIN);
     1c6:	8a e3       	ldi	r24, 0x3A	; 58
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	2a e3       	ldi	r18, 0x3A	; 58
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	f9 01       	movw	r30, r18
     1d0:	20 81       	ld	r18, Z
     1d2:	2e 7f       	andi	r18, 0xFE	; 254
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18
	PORTA &= ~(1 << ADC_PIN);
     1d8:	8b e3       	ldi	r24, 0x3B	; 59
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	2b e3       	ldi	r18, 0x3B	; 59
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	f9 01       	movw	r30, r18
     1e2:	20 81       	ld	r18, Z
     1e4:	2e 7f       	andi	r18, 0xFE	; 254
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18

	//Digital Input Buffer für verwendeten Kanal deaktivieren
	DIDR0  = (1 << ADC_DIGIT_IN_BUF);
     1ea:	81 e2       	ldi	r24, 0x21	; 33
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18


	//Puffer mit Maximalwerten initialisieren, da sonst der
	//Ausgang bei konstanter Spannung mit einer zu hohen Spannung startet
	for (i = 0; i < 8; i++)
     1f4:	19 82       	std	Y+1, r1	; 0x01
     1f6:	0f c0       	rjmp	.+30     	; 0x216 <adcInitialize+0x74>
	{
		#ifdef ADC_LOW_RES
			lastValues[i] = 0xFF; //2^8 -1 = 255 = 0xFF
		#else
			lastValues[i] = 0x03FF; //2^10 -1 = 1023 = 0x03FF
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	88 2f       	mov	r24, r24
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	80 5a       	subi	r24, 0xA0	; 160
     204:	9f 4f       	sbci	r25, 0xFF	; 255
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	33 e0       	ldi	r19, 0x03	; 3
     20a:	fc 01       	movw	r30, r24
     20c:	31 83       	std	Z+1, r19	; 0x01
     20e:	20 83       	st	Z, r18
	DIDR0  = (1 << ADC_DIGIT_IN_BUF);


	//Puffer mit Maximalwerten initialisieren, da sonst der
	//Ausgang bei konstanter Spannung mit einer zu hohen Spannung startet
	for (i = 0; i < 8; i++)
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	89 83       	std	Y+1, r24	; 0x01
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	88 30       	cpi	r24, 0x08	; 8
     21a:	70 f3       	brcs	.-36     	; 0x1f8 <adcInitialize+0x56>
			lastValues[i] = 0xFF; //2^8 -1 = 255 = 0xFF
		#else
			lastValues[i] = 0x03FF; //2^10 -1 = 1023 = 0x03FF
		#endif
	}
}
     21c:	0f 90       	pop	r0
     21e:	cf 91       	pop	r28
     220:	df 91       	pop	r29
     222:	08 95       	ret

00000224 <adcTakeSingleMeasurement>:

void adcTakeSingleMeasurement (void)
{
     224:	df 93       	push	r29
     226:	cf 93       	push	r28
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADSC);                  // start new A/D conversion
     22c:	86 e2       	ldi	r24, 0x26	; 38
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	26 e2       	ldi	r18, 0x26	; 38
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	f9 01       	movw	r30, r18
     236:	20 81       	ld	r18, Z
     238:	20 64       	ori	r18, 0x40	; 64
     23a:	fc 01       	movw	r30, r24
     23c:	20 83       	st	Z, r18
	loop_until_bit_is_clear(ADCSRA, ADSC); 	// wait until ADC is ready
     23e:	86 e2       	ldi	r24, 0x26	; 38
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	88 2f       	mov	r24, r24
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	80 74       	andi	r24, 0x40	; 64
     24c:	90 70       	andi	r25, 0x00	; 0
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	b1 f7       	brne	.-20     	; 0x23e <adcTakeSingleMeasurement+0x1a>

	//Ergebnis der Messung steht in ADC bzw. ADCH
}
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <adcReadValue>:
 * Ein Messvorgang jede Sekunde.
 * Ergebnis als Mittelwert der letzten 8 Messvorgänge ( = 8 Sekunden)
 * 
 ***************************************************************************/
void adcReadValue()
{
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	00 d0       	rcall	.+0      	; 0x25e <adcReadValue+0x6>
     25e:	00 d0       	rcall	.+0      	; 0x260 <__stack+0x1>
     260:	0f 92       	push	r0
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
	cli();
     266:	f8 94       	cli

	uint8_t i;
	uint_adc value;
	uint16_t sum = 0;
     268:	1b 82       	std	Y+3, r1	; 0x03
     26a:	1a 82       	std	Y+2, r1	; 0x02

	//Mittelwert aus 8 Messungen
	for (i = 0; i < 8; i++)
     26c:	19 82       	std	Y+1, r1	; 0x01
     26e:	0f c0       	rjmp	.+30     	; 0x28e <__stack+0x2f>
	{
		adcTakeSingleMeasurement();
     270:	d9 df       	rcall	.-78     	; 0x224 <adcTakeSingleMeasurement>

		#ifdef ADC_LOW_RES
			sum += ADCH;
		#else
			sum += ADC;
     272:	84 e2       	ldi	r24, 0x24	; 36
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	80 81       	ld	r24, Z
     27a:	91 81       	ldd	r25, Z+1	; 0x01
     27c:	2a 81       	ldd	r18, Y+2	; 0x02
     27e:	3b 81       	ldd	r19, Y+3	; 0x03
     280:	82 0f       	add	r24, r18
     282:	93 1f       	adc	r25, r19
     284:	9b 83       	std	Y+3, r25	; 0x03
     286:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	uint_adc value;
	uint16_t sum = 0;

	//Mittelwert aus 8 Messungen
	for (i = 0; i < 8; i++)
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	89 83       	std	Y+1, r24	; 0x01
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	88 30       	cpi	r24, 0x08	; 8
     292:	70 f3       	brcs	.-36     	; 0x270 <__stack+0x11>
			sum += ADCH;
		#else
			sum += ADC;
		#endif
	}
	value = sum >> 3; //DIV 8
     294:	8a 81       	ldd	r24, Y+2	; 0x02
     296:	9b 81       	ldd	r25, Y+3	; 0x03
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	96 95       	lsr	r25
     29e:	87 95       	ror	r24
     2a0:	96 95       	lsr	r25
     2a2:	87 95       	ror	r24
     2a4:	9d 83       	std	Y+5, r25	; 0x05
     2a6:	8c 83       	std	Y+4, r24	; 0x04

	//Die letzen 8 Messungen werden gesichert
	if (currentIndex++ == 8) currentIndex = 0;
     2a8:	90 91 d5 00 	lds	r25, 0x00D5
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	98 30       	cpi	r25, 0x08	; 8
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <__stack+0x55>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	9f 5f       	subi	r25, 0xFF	; 255
     2b6:	90 93 d5 00 	sts	0x00D5, r25
     2ba:	88 23       	and	r24, r24
     2bc:	11 f0       	breq	.+4      	; 0x2c2 <__stack+0x63>
     2be:	10 92 d5 00 	sts	0x00D5, r1
	lastValues[currentIndex] = value; 
     2c2:	80 91 d5 00 	lds	r24, 0x00D5
     2c6:	88 2f       	mov	r24, r24
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	80 5a       	subi	r24, 0xA0	; 160
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	2c 81       	ldd	r18, Y+4	; 0x04
     2d4:	3d 81       	ldd	r19, Y+5	; 0x05
     2d6:	fc 01       	movw	r30, r24
     2d8:	31 83       	std	Z+1, r19	; 0x01
     2da:	20 83       	st	Z, r18
	
	//Mittelwert der letzten 8 Messungen
	sum = 0;
     2dc:	1b 82       	std	Y+3, r1	; 0x03
     2de:	1a 82       	std	Y+2, r1	; 0x02
	for (i = 0; i < 8; i++) {
     2e0:	19 82       	std	Y+1, r1	; 0x01
     2e2:	13 c0       	rjmp	.+38     	; 0x30a <__stack+0xab>
		sum += lastValues[i];
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	88 2f       	mov	r24, r24
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	80 5a       	subi	r24, 0xA0	; 160
     2f0:	9f 4f       	sbci	r25, 0xFF	; 255
     2f2:	fc 01       	movw	r30, r24
     2f4:	80 81       	ld	r24, Z
     2f6:	91 81       	ldd	r25, Z+1	; 0x01
     2f8:	2a 81       	ldd	r18, Y+2	; 0x02
     2fa:	3b 81       	ldd	r19, Y+3	; 0x03
     2fc:	82 0f       	add	r24, r18
     2fe:	93 1f       	adc	r25, r19
     300:	9b 83       	std	Y+3, r25	; 0x03
     302:	8a 83       	std	Y+2, r24	; 0x02
	if (currentIndex++ == 8) currentIndex = 0;
	lastValues[currentIndex] = value; 
	
	//Mittelwert der letzten 8 Messungen
	sum = 0;
	for (i = 0; i < 8; i++) {
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	89 83       	std	Y+1, r24	; 0x01
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	88 30       	cpi	r24, 0x08	; 8
     30e:	50 f3       	brcs	.-44     	; 0x2e4 <__stack+0x85>
		sum += lastValues[i];
	}
	currentADCValue = sum >> 3;
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	9b 81       	ldd	r25, Y+3	; 0x03
     314:	96 95       	lsr	r25
     316:	87 95       	ror	r24
     318:	96 95       	lsr	r25
     31a:	87 95       	ror	r24
     31c:	96 95       	lsr	r25
     31e:	87 95       	ror	r24
     320:	90 93 ef 00 	sts	0x00EF, r25
     324:	80 93 ee 00 	sts	0x00EE, r24

	sei();
     328:	78 94       	sei
}
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	cf 91       	pop	r28
     336:	df 91       	pop	r29
     338:	08 95       	ret

0000033a <btnInitialize>:
 * 
 * Initialisieren
 * 
 ***************************************************************************/
void btnInitialize(void)
{
     33a:	df 93       	push	r29
     33c:	cf 93       	push	r28
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
	//Pin als Input setzen
	BUTTON1_DDR &= ~(1<<BUTTON1_PIN);
     342:	8a e3       	ldi	r24, 0x3A	; 58
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	2a e3       	ldi	r18, 0x3A	; 58
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	f9 01       	movw	r30, r18
     34c:	20 81       	ld	r18, Z
     34e:	2f 7e       	andi	r18, 0xEF	; 239
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	//Pullup aktivieren
	BUTTON1_PORT |= (1<<BUTTON1_PIN);
     354:	8b e3       	ldi	r24, 0x3B	; 59
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	2b e3       	ldi	r18, 0x3B	; 59
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	20 61       	ori	r18, 0x10	; 16
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	#ifdef V2_DUO 
		BUTTON2_DDR &= ~(1<<BUTTON2_PIN);
		BUTTON2_PORT |= (1<<BUTTON2_PIN);
	#endif

	btnState = BTN_IDLE;
     366:	8a e0       	ldi	r24, 0x0A	; 10
     368:	80 93 70 00 	sts	0x0070, r24
	btnCode = 0x00;
     36c:	10 92 d6 00 	sts	0x00D6, r1
	btnWaitCounter = 0;
     370:	10 92 d7 00 	sts	0x00D7, r1
}
     374:	cf 91       	pop	r28
     376:	df 91       	pop	r29
     378:	08 95       	ret

0000037a <btnRefreshState>:
 *
 * Beide Taster sind unabhängig voneinander...
 * 
 ***************************************************************************/
void btnRefreshState(void)
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	00 d0       	rcall	.+0      	; 0x380 <btnRefreshState+0x6>
     380:	0f 92       	push	r0
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
	uint8_t nextState 		= btnState;
     386:	80 91 70 00 	lds	r24, 0x0070
     38a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t fBtnCode 		= btnCode;
     38c:	80 91 d6 00 	lds	r24, 0x00D6
     390:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t fBtnWaitCounter = btnWaitCounter;
     392:	80 91 d7 00 	lds	r24, 0x00D7
     396:	8a 83       	std	Y+2, r24	; 0x02

	if (bit_is_clear(BUTTON1_PINR, BUTTON1_PIN)) {	fBtnCode |= (1<<BTN1PRESSING); } else { fBtnCode &= ~(1<<BTN1PRESSING);}
     398:	89 e3       	ldi	r24, 0x39	; 57
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	fc 01       	movw	r30, r24
     39e:	80 81       	ld	r24, Z
     3a0:	88 2f       	mov	r24, r24
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	80 71       	andi	r24, 0x10	; 16
     3a6:	90 70       	andi	r25, 0x00	; 0
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	21 f4       	brne	.+8      	; 0x3b4 <btnRefreshState+0x3a>
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	8b 83       	std	Y+3, r24	; 0x03
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <btnRefreshState+0x40>
     3b4:	8b 81       	ldd	r24, Y+3	; 0x03
     3b6:	8b 7f       	andi	r24, 0xFB	; 251
     3b8:	8b 83       	std	Y+3, r24	; 0x03

	#ifdef V2_DUO
		if (bit_is_clear(BUTTON2_PINR, BUTTON2_PIN)) {	fBtnCode |= (1<<BTN2PRESSING); } else { fBtnCode &= ~(1<<BTN2PRESSING);}
	#endif

	switch (btnState) {
     3ba:	80 91 70 00 	lds	r24, 0x0070
     3be:	88 2f       	mov	r24, r24
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	8b 30       	cpi	r24, 0x0B	; 11
     3c4:	91 05       	cpc	r25, r1
     3c6:	f9 f0       	breq	.+62     	; 0x406 <btnRefreshState+0x8c>
     3c8:	8c 30       	cpi	r24, 0x0C	; 12
     3ca:	91 05       	cpc	r25, r1
     3cc:	24 f4       	brge	.+8      	; 0x3d6 <btnRefreshState+0x5c>
     3ce:	8a 30       	cpi	r24, 0x0A	; 10
     3d0:	91 05       	cpc	r25, r1
     3d2:	49 f0       	breq	.+18     	; 0x3e6 <btnRefreshState+0x6c>
     3d4:	71 c0       	rjmp	.+226    	; 0x4b8 <btnRefreshState+0x13e>
     3d6:	8c 30       	cpi	r24, 0x0C	; 12
     3d8:	91 05       	cpc	r25, r1
     3da:	81 f1       	breq	.+96     	; 0x43c <btnRefreshState+0xc2>
     3dc:	8d 30       	cpi	r24, 0x0D	; 13
     3de:	91 05       	cpc	r25, r1
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <btnRefreshState+0x6a>
     3e2:	48 c0       	rjmp	.+144    	; 0x474 <btnRefreshState+0xfa>
     3e4:	69 c0       	rjmp	.+210    	; 0x4b8 <btnRefreshState+0x13e>
		case BTN_IDLE : {
			if (bit_is_set(fBtnCode, BTN1PRESSING)) 
     3e6:	ce 01       	movw	r24, r28
     3e8:	03 96       	adiw	r24, 0x03	; 3
     3ea:	fc 01       	movw	r30, r24
     3ec:	80 81       	ld	r24, Z
     3ee:	88 2f       	mov	r24, r24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	84 70       	andi	r24, 0x04	; 4
     3f4:	90 70       	andi	r25, 0x00	; 0
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	09 f4       	brne	.+2      	; 0x3fc <btnRefreshState+0x82>
     3fa:	57 c0       	rjmp	.+174    	; 0x4aa <btnRefreshState+0x130>
			{
				fBtnWaitCounter = BTN_TIME_TO_LONG_PRESSED; //1. Interval für Intervalgeber
     3fc:	88 e0       	ldi	r24, 0x08	; 8
     3fe:	8a 83       	std	Y+2, r24	; 0x02
				nextState = BTN_T1;
     400:	8b e0       	ldi	r24, 0x0B	; 11
     402:	89 83       	std	Y+1, r24	; 0x01
			{
				fBtnWaitCounter = BTN_TIME_TO_LONG_PRESSED; //1. Interval für Intervalgeber
				nextState = BTN_T2;
			}
			#endif
			break;
     404:	59 c0       	rjmp	.+178    	; 0x4b8 <btnRefreshState+0x13e>
		} //BTN_IDLE

		case BTN_T1 : {
			//Taster ist noch gedrückt ?
			if (bit_is_set(fBtnCode, BTN1PRESSING)) 
     406:	ce 01       	movw	r24, r28
     408:	03 96       	adiw	r24, 0x03	; 3
     40a:	fc 01       	movw	r30, r24
     40c:	80 81       	ld	r24, Z
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	84 70       	andi	r24, 0x04	; 4
     414:	90 70       	andi	r25, 0x00	; 0
     416:	00 97       	sbiw	r24, 0x00	; 0
     418:	61 f0       	breq	.+24     	; 0x432 <btnRefreshState+0xb8>
			{
				//Timer runterzählen, wenn 0, dann in den Zustand für einen
				//langen Tastendruck wechseln
				//Counter auf einen neuen Wert einstellen
				if (0 == --fBtnWaitCounter)
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	81 50       	subi	r24, 0x01	; 1
     41e:	8a 83       	std	Y+2, r24	; 0x02
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	88 23       	and	r24, r24
     424:	09 f0       	breq	.+2      	; 0x428 <btnRefreshState+0xae>
     426:	43 c0       	rjmp	.+134    	; 0x4ae <btnRefreshState+0x134>
				{
					fBtnWaitCounter = BTN_TIME_LONG_WAIT;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	8a 83       	std	Y+2, r24	; 0x02
					nextState = BTN_T1_LONG;
     42c:	8c e0       	ldi	r24, 0x0C	; 12
     42e:	89 83       	std	Y+1, r24	; 0x01
			} else	{
				//Taster losgelassen
				fBtnCode = (1<<BTN1SHORTPRESS)|(1<<BTN1RELEASED);
				nextState = BTN_IDLE;
			}
			break;
     430:	43 c0       	rjmp	.+134    	; 0x4b8 <btnRefreshState+0x13e>
					nextState = BTN_T1_LONG;
				}

			} else	{
				//Taster losgelassen
				fBtnCode = (1<<BTN1SHORTPRESS)|(1<<BTN1RELEASED);
     432:	89 e0       	ldi	r24, 0x09	; 9
     434:	8b 83       	std	Y+3, r24	; 0x03
				nextState = BTN_IDLE;
     436:	8a e0       	ldi	r24, 0x0A	; 10
     438:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     43a:	3e c0       	rjmp	.+124    	; 0x4b8 <btnRefreshState+0x13e>
		} //BTN_T1

		case BTN_T1_LONG : {
			//Taster ist noch gedrückt ?
			if (bit_is_set(fBtnCode, BTN1PRESSING)) 
     43c:	ce 01       	movw	r24, r28
     43e:	03 96       	adiw	r24, 0x03	; 3
     440:	fc 01       	movw	r30, r24
     442:	80 81       	ld	r24, Z
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	84 70       	andi	r24, 0x04	; 4
     44a:	90 70       	andi	r25, 0x00	; 0
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	69 f0       	breq	.+26     	; 0x46a <btnRefreshState+0xf0>
			{
				//Nachdem eine weitere kurze Zeit gewartet wird,
				//wird der Buttoncode auf "gedrückt" gesetzt und im Anschluss gewartet,
				//bis der Taster losgelassen wird.
				if (0 == --fBtnWaitCounter)
     450:	8a 81       	ldd	r24, Y+2	; 0x02
     452:	81 50       	subi	r24, 0x01	; 1
     454:	8a 83       	std	Y+2, r24	; 0x02
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	88 23       	and	r24, r24
     45a:	59 f5       	brne	.+86     	; 0x4b2 <btnRefreshState+0x138>
				{
					//TasterCode "losgelassen" und "lange gedrückt"
					//Somit werden die Ereignisse die vom Taster abhängen schon bearbeitet,
					//ohne darauf warten zu müssen, dass der Taster losgelassen wird.
					fBtnCode = (1<<BTN1LONGPRESSED)|(1<<BTN1RELEASED)|(1<<BTN1PRESSING);
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	8b 83       	std	Y+3, r24	; 0x03

					//Timer neu setzen
					fBtnWaitCounter = BTN_TIME_WAIT_TO_REPEAT_LONG;
     460:	88 e0       	ldi	r24, 0x08	; 8
     462:	8a 83       	std	Y+2, r24	; 0x02
					nextState = BTN_T1_WAIT_RELEASE;
     464:	8d e0       	ldi	r24, 0x0D	; 13
     466:	89 83       	std	Y+1, r24	; 0x01
			} else	{
				//Taster losgelassen
				fBtnCode = (1<<BTN1LONGPRESSED)|(1<<BTN1RELEASED);
				nextState = BTN_IDLE;
			}
			break;
     468:	27 c0       	rjmp	.+78     	; 0x4b8 <btnRefreshState+0x13e>
					fBtnWaitCounter = BTN_TIME_WAIT_TO_REPEAT_LONG;
					nextState = BTN_T1_WAIT_RELEASE;
				}
			} else	{
				//Taster losgelassen
				fBtnCode = (1<<BTN1LONGPRESSED)|(1<<BTN1RELEASED);
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	8b 83       	std	Y+3, r24	; 0x03
				nextState = BTN_IDLE;
     46e:	8a e0       	ldi	r24, 0x0A	; 10
     470:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     472:	22 c0       	rjmp	.+68     	; 0x4b8 <btnRefreshState+0x13e>
		} //BTN_T1_LONG

		case BTN_T1_WAIT_RELEASE : {
			
			if (bit_is_set(fBtnCode, BTN1PRESSING)) {
     474:	ce 01       	movw	r24, r28
     476:	03 96       	adiw	r24, 0x03	; 3
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	88 2f       	mov	r24, r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	84 70       	andi	r24, 0x04	; 4
     482:	90 70       	andi	r25, 0x00	; 0
     484:	00 97       	sbiw	r24, 0x00	; 0
     486:	59 f0       	breq	.+22     	; 0x49e <btnRefreshState+0x124>
				if (0 == --fBtnWaitCounter) {
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	8a 83       	std	Y+2, r24	; 0x02
     48e:	8a 81       	ldd	r24, Y+2	; 0x02
     490:	88 23       	and	r24, r24
     492:	89 f4       	brne	.+34     	; 0x4b6 <btnRefreshState+0x13c>
					//Wenn die Wartedauer vorbei ist, wird erneut der Taster
					//in den Zustand "lange gedrückt gesetzt

					//Timer neu setzen
					fBtnWaitCounter = BTN_TIME_LONG_WAIT	; 
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	8a 83       	std	Y+2, r24	; 0x02
					nextState = BTN_T1_LONG;
     498:	8c e0       	ldi	r24, 0x0C	; 12
     49a:	89 83       	std	Y+1, r24	; 0x01
				//Button ist losgelassen -> gehe zurück nach Idle
				fBtnCode &= ~(1<<BTN1PRESSING);
				nextState = BTN_IDLE;
			}

			break;
     49c:	0d c0       	rjmp	.+26     	; 0x4b8 <btnRefreshState+0x13e>
					fBtnWaitCounter = BTN_TIME_LONG_WAIT	; 
					nextState = BTN_T1_LONG;
				}
			} else {
				//Button ist losgelassen -> gehe zurück nach Idle
				fBtnCode &= ~(1<<BTN1PRESSING);
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	8b 7f       	andi	r24, 0xFB	; 251
     4a2:	8b 83       	std	Y+3, r24	; 0x03
				nextState = BTN_IDLE;
     4a4:	8a e0       	ldi	r24, 0x0A	; 10
     4a6:	89 83       	std	Y+1, r24	; 0x01
			}

			break;
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <btnRefreshState+0x13e>
			{
				fBtnWaitCounter = BTN_TIME_TO_LONG_PRESSED; //1. Interval für Intervalgeber
				nextState = BTN_T2;
			}
			#endif
			break;
     4aa:	00 00       	nop
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <btnRefreshState+0x13e>
			} else	{
				//Taster losgelassen
				fBtnCode = (1<<BTN1SHORTPRESS)|(1<<BTN1RELEASED);
				nextState = BTN_IDLE;
			}
			break;
     4ae:	00 00       	nop
     4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <btnRefreshState+0x13e>
			} else	{
				//Taster losgelassen
				fBtnCode = (1<<BTN1LONGPRESSED)|(1<<BTN1RELEASED);
				nextState = BTN_IDLE;
			}
			break;
     4b2:	00 00       	nop
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <btnRefreshState+0x13e>
				//Button ist losgelassen -> gehe zurück nach Idle
				fBtnCode &= ~(1<<BTN1PRESSING);
				nextState = BTN_IDLE;
			}

			break;
     4b6:	00 00       	nop
				break;
			} //BTN_T2_WAIT_RELEASE
		#endif
	} //of case

	btnCode 		= fBtnCode;
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	80 93 d6 00 	sts	0x00D6, r24
	btnWaitCounter 	= fBtnWaitCounter;
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	80 93 d7 00 	sts	0x00D7, r24

	btnState 		= nextState;
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	80 93 70 00 	sts	0x0070, r24
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	cf 91       	pop	r28
     4d2:	df 91       	pop	r29
     4d4:	08 95       	ret

000004d6 <calibResetFlag>:
	uint_adc eeCalibAdcValues[CALIB_CNT] EEMEM = {599, 624, 641, 651, 658, 662, 665, 667, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 682, 682, 683, 684, 684, 685, 686, 686, 686, 687, 687, 688, 689, 689, 690, 691, 692, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 710, 711, 713, 714, 716, 718, 719, 721, 722, 724, 725, 727, 729, 731, 734, 737, 740, 743, 745, 747, 749, 750, 753, 755, 758, 760, 763, 766, 770, 775, 837, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,65535};
#endif

uint8_t eeCalibFlag EEMEM = 0xE8;

void calibResetFlag(void) {
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
	//Flag löschen und sichern => Kalibrierung beendet
	eeprom_write_byte(&eeCalibFlag, 0x00);
     4de:	8c ee       	ldi	r24, 0xEC	; 236
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	e4 db       	rcall	.-2104   	; 0xfffffcae <__eeprom_end+0xff7efbb0>
}
     4e6:	cf 91       	pop	r28
     4e8:	df 91       	pop	r29
     4ea:	08 95       	ret

000004ec <calibInitialize>:

void calibInitialize(void)
{
     4ec:	df 93       	push	r29
     4ee:	cf 93       	push	r28
     4f0:	0f 92       	push	r0
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
 	uint8_t cFlag = eeprom_read_byte(&eeCalibFlag);
     4f6:	8c ee       	ldi	r24, 0xEC	; 236
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	c3 db       	rcall	.-2170   	; 0xfffffc82 <__eeprom_end+0xff7efb84>
     4fc:	89 83       	std	Y+1, r24	; 0x01

	#ifdef DEBUG
		sendCalibTable();
	#endif

	if (cFlag == 0xE8)
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	88 3e       	cpi	r24, 0xE8	; 232
     502:	09 f4       	brne	.+2      	; 0x506 <calibInitialize+0x1a>
	{
		//Finalize
		calibFinalize();
     504:	66 d0       	rcall	.+204    	; 0x5d2 <calibFinalize>
	}
}
     506:	0f 90       	pop	r0
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	08 95       	ret

0000050e <calibStart>:

void calibStart(void)
{
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	00 d0       	rcall	.+0      	; 0x514 <calibStart+0x6>
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
	uint8_t cFlag = 0xE8;
     518:	88 ee       	ldi	r24, 0xE8	; 232
     51a:	8a 83       	std	Y+2, r24	; 0x02
	eeprom_write_byte(&eeCalibFlag, cFlag); 
     51c:	8c ee       	ldi	r24, 0xEC	; 236
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	6a 81       	ldd	r22, Y+2	; 0x02
     522:	c5 db       	rcall	.-2166   	; 0xfffffcae <__eeprom_end+0xff7efbb0>

	//Alle Werte mit 0xFFFF initialisieren
	uint8_t i;
	for (i = 0; i < CALIB_CNT; i++)
     524:	19 82       	std	Y+1, r1	; 0x01
     526:	0d c0       	rjmp	.+26     	; 0x542 <calibStart+0x34>
	{
		#ifdef ADC_LOW_RES
			eeprom_write_byte(&eeCalibAdcValues[i], 0xFF);
		#else
			eeprom_write_word(&eeCalibAdcValues[i], 0xFFFF);
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	88 2f       	mov	r24, r24
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	80 5f       	subi	r24, 0xF0	; 240
     534:	9f 4f       	sbci	r25, 0xFF	; 255
     536:	6f ef       	ldi	r22, 0xFF	; 255
     538:	7f ef       	ldi	r23, 0xFF	; 255
     53a:	c7 db       	rcall	.-2162   	; 0xfffffcca <__eeprom_end+0xff7efbcc>
	uint8_t cFlag = 0xE8;
	eeprom_write_byte(&eeCalibFlag, cFlag); 

	//Alle Werte mit 0xFFFF initialisieren
	uint8_t i;
	for (i = 0; i < CALIB_CNT; i++)
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	8e 36       	cpi	r24, 0x6E	; 110
     546:	80 f3       	brcs	.-32     	; 0x528 <calibStart+0x1a>
	}

	#ifdef DEBUG
		sendCalibTable();
	#endif
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <calibAddAdcValue>:

void calibAddAdcValue()
{
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	00 d0       	rcall	.+0      	; 0x558 <calibAddAdcValue+0x6>
     558:	00 d0       	rcall	.+0      	; 0x55a <calibAddAdcValue+0x8>
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint_adc b;
	
	uint8_t sreg=SREG; 
     55e:	8f e5       	ldi	r24, 0x5F	; 95
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	fc 01       	movw	r30, r24
     564:	80 81       	ld	r24, Z
     566:	8a 83       	std	Y+2, r24	; 0x02
	cli();  
     568:	f8 94       	cli

	//Adcvalue wird jede Sekunde gemessen, currentADCValue hält Wert als Schnitt der letzten 8 Sekunden
		
	//Alle Elemente in der Liste um eine Position nach hinten verschieben
	for (i = CALIB_CNT - 1; i > 0 ; i--)
     56a:	8d e6       	ldi	r24, 0x6D	; 109
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	19 c0       	rjmp	.+50     	; 0x5a2 <calibAddAdcValue+0x50>
	{
		#ifdef ADC_LOW_RES
			b = eeprom_read_byte(&eeCalibAdcValues[i - 1]);
			eeprom_write_byte(&eeCalibAdcValues[i], b);
		#else
			b = eeprom_read_word(&eeCalibAdcValues[i - 1]);
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	80 5f       	subi	r24, 0xF0	; 240
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	88 db       	rcall	.-2288   	; 0xfffffc92 <__eeprom_end+0xff7efb94>
     582:	9c 83       	std	Y+4, r25	; 0x04
     584:	8b 83       	std	Y+3, r24	; 0x03
			eeprom_write_word(&eeCalibAdcValues[i], b);
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	88 2f       	mov	r24, r24
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	80 5f       	subi	r24, 0xF0	; 240
     592:	9f 4f       	sbci	r25, 0xFF	; 255
     594:	2b 81       	ldd	r18, Y+3	; 0x03
     596:	3c 81       	ldd	r19, Y+4	; 0x04
     598:	b9 01       	movw	r22, r18
     59a:	97 db       	rcall	.-2258   	; 0xfffffcca <__eeprom_end+0xff7efbcc>
	cli();  

	//Adcvalue wird jede Sekunde gemessen, currentADCValue hält Wert als Schnitt der letzten 8 Sekunden
		
	//Alle Elemente in der Liste um eine Position nach hinten verschieben
	for (i = CALIB_CNT - 1; i > 0 ; i--)
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	88 23       	and	r24, r24
     5a6:	21 f7       	brne	.-56     	; 0x570 <calibAddAdcValue+0x1e>

	//Messwert vorne anfügen
	#ifdef ADC_LOW_RES
		eeprom_write_byte(&eeCalibAdcValues[0], currentADCValue);
	#else
		eeprom_write_word(&eeCalibAdcValues[0], currentADCValue);
     5a8:	20 91 ee 00 	lds	r18, 0x00EE
     5ac:	30 91 ef 00 	lds	r19, 0x00EF
     5b0:	80 e1       	ldi	r24, 0x10	; 16
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	b9 01       	movw	r22, r18
     5b6:	89 db       	rcall	.-2286   	; 0xfffffcca <__eeprom_end+0xff7efbcc>
		sendControllerState();
		sendCalibTable();
	#endif


	SREG=sreg;
     5b8:	8f e5       	ldi	r24, 0x5F	; 95
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
	sei();
     5c2:	78 94       	sei
}
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	cf 91       	pop	r28
     5ce:	df 91       	pop	r29
     5d0:	08 95       	ret

000005d2 <calibFinalize>:

void calibFinalize(void)
{
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	df 93       	push	r29
     5d8:	cf 93       	push	r28
     5da:	00 d0       	rcall	.+0      	; 0x5dc <calibFinalize+0xa>
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t sreg=SREG; 
     5e0:	8f e5       	ldi	r24, 0x5F	; 95
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef DEBUG
		sendCalibTable();
	#endif
	cli(); 
     5ea:	f8 94       	cli
	#ifdef ADC_LOW_RES
		for (i = 0; i < 8; i++){
			accuVoltageLevels[i] = eeprom_read_byte(&eeCalibAdcValues[(i+1)*12]);
		}
	#else
		for (i = 0; i < 8; i++){
     5ec:	19 82       	std	Y+1, r1	; 0x01
     5ee:	1a c0       	rjmp	.+52     	; 0x624 <calibFinalize+0x52>
			accuVoltageLevels[i] = eeprom_read_word(&eeCalibAdcValues[(i+1)*12]);
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	08 2f       	mov	r16, r24
     5f4:	10 e0       	ldi	r17, 0x00	; 0
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	28 e1       	ldi	r18, 0x18	; 24
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	b9 01       	movw	r22, r18
     604:	08 db       	rcall	.-2544   	; 0xfffffc16 <__eeprom_end+0xff7efb18>
     606:	80 5f       	subi	r24, 0xF0	; 240
     608:	9f 4f       	sbci	r25, 0xFF	; 255
     60a:	43 db       	rcall	.-2426   	; 0xfffffc92 <__eeprom_end+0xff7efb94>
     60c:	9c 01       	movw	r18, r24
     60e:	c8 01       	movw	r24, r16
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	82 52       	subi	r24, 0x22	; 34
     616:	9f 4f       	sbci	r25, 0xFF	; 255
     618:	fc 01       	movw	r30, r24
     61a:	31 83       	std	Z+1, r19	; 0x01
     61c:	20 83       	st	Z, r18
	#ifdef ADC_LOW_RES
		for (i = 0; i < 8; i++){
			accuVoltageLevels[i] = eeprom_read_byte(&eeCalibAdcValues[(i+1)*12]);
		}
	#else
		for (i = 0; i < 8; i++){
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	89 83       	std	Y+1, r24	; 0x01
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	88 30       	cpi	r24, 0x08	; 8
     628:	18 f3       	brcs	.-58     	; 0x5f0 <calibFinalize+0x1e>
			accuVoltageLevels[i] = eeprom_read_word(&eeCalibAdcValues[(i+1)*12]);
		}
	#endif
	//Werte sichern
	accuStoreVoltageLevelsToEEPROM();
     62a:	2f dd       	rcall	.-1442   	; 0x8a <accuStoreVoltageLevelsToEEPROM>

	calibResetFlag();	
     62c:	54 df       	rcall	.-344    	; 0x4d6 <calibResetFlag>

	SREG=sreg;
     62e:	8f e5       	ldi	r24, 0x5F	; 95
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	2a 81       	ldd	r18, Y+2	; 0x02
     634:	fc 01       	movw	r30, r24
     636:	20 83       	st	Z, r18
	sei();
     638:	78 94       	sei
}
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	cf 91       	pop	r28
     640:	df 91       	pop	r29
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <doSleep>:
 * Leds sind aus
 * 
 * Gesamtstromaufnahme sollte somit < 6 mA sein (realer Messwert ~5mA)
 ***************************************************************************/
void doSleep(void)
{
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
	//PinChangeInterrupt für Button aktivieren
	PCMSK0 = (1 << BUTTON1_INT);
     650:	82 e3       	ldi	r24, 0x32	; 50
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	20 e1       	ldi	r18, 0x10	; 16
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
	GIMSK |= (1 << PCIE0);
     65a:	8b e5       	ldi	r24, 0x5B	; 91
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2b e5       	ldi	r18, 0x5B	; 91
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	20 61       	ori	r18, 0x10	; 16
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18

	//Schlafmodus setzen, aktivieren
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     66c:	85 e5       	ldi	r24, 0x55	; 85
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	25 e5       	ldi	r18, 0x55	; 85
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	27 7e       	andi	r18, 0xE7	; 231
     67a:	20 61       	ori	r18, 0x10	; 16
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
	sleep_enable();
     680:	85 e5       	ldi	r24, 0x55	; 85
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	25 e5       	ldi	r18, 0x55	; 85
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	20 81       	ld	r18, Z
     68c:	20 62       	ori	r18, 0x20	; 32
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
	//Einschlafen
	sleep_mode();
     692:	85 e5       	ldi	r24, 0x55	; 85
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	25 e5       	ldi	r18, 0x55	; 85
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	20 62       	ori	r18, 0x20	; 32
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	88 95       	sleep
     6a6:	85 e5       	ldi	r24, 0x55	; 85
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	25 e5       	ldi	r18, 0x55	; 85
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	2f 7d       	andi	r18, 0xDF	; 223
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
}
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	08 95       	ret

000006be <__vector_2>:

/***************************************************************************
 *	PinChangeINT
 ***************************************************************************/
SIGNAL (SIG_PIN_CHANGE0)
{
     6be:	1f 92       	push	r1
     6c0:	0f 92       	push	r0
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	0f 92       	push	r0
     6c6:	11 24       	eor	r1, r1
     6c8:	2f 93       	push	r18
     6ca:	3f 93       	push	r19
     6cc:	8f 93       	push	r24
     6ce:	9f 93       	push	r25
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
     6d4:	df 93       	push	r29
     6d6:	cf 93       	push	r28
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
	sleep_disable();
     6dc:	85 e5       	ldi	r24, 0x55	; 85
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	25 e5       	ldi	r18, 0x55	; 85
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	f9 01       	movw	r30, r18
     6e6:	20 81       	ld	r18, Z
     6e8:	2f 7d       	andi	r18, 0xDF	; 223
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18
}
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <initialize>:

/***************************************************************************
 *	Controller initiieren
 ***************************************************************************/
void initialize(void)
{
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
	//Alle Programmteile initialisieren
	pwmInitialize();	//PWM-Ausgabe der Leistungstreiber
     710:	ef d0       	rcall	.+478    	; 0x8f0 <pwmInitialize>
	timerInitialize();	//Timer Programmsteuerung
     712:	d0 d8       	rcall	.-3680   	; 0xfffff8b4 <__eeprom_end+0xff7ef7b6>
	btnInitialize();	//Taster
     714:	12 de       	rcall	.-988    	; 0x33a <btnInitialize>
 	stateInitialize();	//Zustandsmaschine für Programmablaufsteuerung	
     716:	4c d5       	rcall	.+2712   	; 0x11b0 <stateInitialize>
	rgbInitialize();	//PWM-Ausgabe der RGB-Leds
     718:	54 d3       	rcall	.+1704   	; 0xdc2 <rgbInitialize>
	adcInitialize();	//ADC-Wandler für Spannungsmessung
     71a:	43 dd       	rcall	.-1402   	; 0x1a2 <adcInitialize>
	accuInitialize();	//Kapazitätsermittlung initieren
     71c:	9e dc       	rcall	.-1732   	; 0x5a <accuInitialize>
	#ifdef DEBUG
		uart_init();
	#endif

	//Interrupts aktivieren
	sei();
     71e:	78 94       	sei
}
     720:	cf 91       	pop	r28
     722:	df 91       	pop	r29
     724:	08 95       	ret

00000726 <main>:
 * Schleife, die bei gesetzten Aktions-Flags die entsprechenden Routinen
 * ausführt
 *
 ***************************************************************************/
int main(void)
{
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	2e 97       	sbiw	r28, 0x0e	; 14
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	a8 e4       	ldi	r26, 0x48	; 72
     744:	b2 e4       	ldi	r27, 0x42	; 66
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	ab 83       	std	Y+3, r26	; 0x03
     74c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     74e:	69 81       	ldd	r22, Y+1	; 0x01
     750:	7a 81       	ldd	r23, Y+2	; 0x02
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	9c 81       	ldd	r25, Y+4	; 0x04
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	4a ef       	ldi	r20, 0xFA	; 250
     75c:	54 e4       	ldi	r21, 0x44	; 68
     75e:	c8 d9       	rcall	.-3184   	; 0xfffffaf0 <__eeprom_end+0xff7ef9f2>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	8d 83       	std	Y+5, r24	; 0x05
     766:	9e 83       	std	Y+6, r25	; 0x06
     768:	af 83       	std	Y+7, r26	; 0x07
     76a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     76c:	11 e0       	ldi	r17, 0x01	; 1
     76e:	6d 81       	ldd	r22, Y+5	; 0x05
     770:	7e 81       	ldd	r23, Y+6	; 0x06
     772:	8f 81       	ldd	r24, Y+7	; 0x07
     774:	98 85       	ldd	r25, Y+8	; 0x08
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	40 e8       	ldi	r20, 0x80	; 128
     77c:	5f e3       	ldi	r21, 0x3F	; 63
     77e:	37 d9       	rcall	.-3474   	; 0xfffff9ee <__eeprom_end+0xff7ef8f0>
     780:	88 23       	and	r24, r24
     782:	0c f0       	brlt	.+2      	; 0x786 <main+0x60>
     784:	10 e0       	ldi	r17, 0x00	; 0
     786:	11 23       	and	r17, r17
     788:	29 f0       	breq	.+10     	; 0x794 <main+0x6e>
		__ticks = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	9a 87       	std	Y+10, r25	; 0x0a
     790:	89 87       	std	Y+9, r24	; 0x09
     792:	42 c0       	rjmp	.+132    	; 0x818 <main+0xf2>
	else if (__tmp > 65535)
     794:	11 e0       	ldi	r17, 0x01	; 1
     796:	6d 81       	ldd	r22, Y+5	; 0x05
     798:	7e 81       	ldd	r23, Y+6	; 0x06
     79a:	8f 81       	ldd	r24, Y+7	; 0x07
     79c:	98 85       	ldd	r25, Y+8	; 0x08
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	3f ef       	ldi	r19, 0xFF	; 255
     7a2:	4f e7       	ldi	r20, 0x7F	; 127
     7a4:	57 e4       	ldi	r21, 0x47	; 71
     7a6:	a0 d9       	rcall	.-3264   	; 0xfffffae8 <__eeprom_end+0xff7ef9ea>
     7a8:	18 16       	cp	r1, r24
     7aa:	0c f0       	brlt	.+2      	; 0x7ae <main+0x88>
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	11 23       	and	r17, r17
     7b0:	51 f1       	breq	.+84     	; 0x806 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b2:	69 81       	ldd	r22, Y+1	; 0x01
     7b4:	7a 81       	ldd	r23, Y+2	; 0x02
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e2       	ldi	r20, 0x20	; 32
     7c0:	51 e4       	ldi	r21, 0x41	; 65
     7c2:	96 d9       	rcall	.-3284   	; 0xfffffaf0 <__eeprom_end+0xff7ef9f2>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	14 d9       	rcall	.-3544   	; 0xfffff9f6 <__eeprom_end+0xff7ef8f8>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	9a 87       	std	Y+10, r25	; 0x0a
     7d4:	89 87       	std	Y+9, r24	; 0x09
     7d6:	12 c0       	rjmp	.+36     	; 0x7fc <main+0xd6>
     7d8:	88 ec       	ldi	r24, 0xC8	; 200
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	9c 87       	std	Y+12, r25	; 0x0c
     7de:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7e4:	8c 01       	movw	r16, r24
     7e6:	c8 01       	movw	r24, r16
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <main+0xc2>
     7ec:	8c 01       	movw	r16, r24
     7ee:	1c 87       	std	Y+12, r17	; 0x0c
     7f0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f2:	89 85       	ldd	r24, Y+9	; 0x09
     7f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	9a 87       	std	Y+10, r25	; 0x0a
     7fa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fc:	89 85       	ldd	r24, Y+9	; 0x09
     7fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	51 f7       	brne	.-44     	; 0x7d8 <main+0xb2>
     804:	16 c0       	rjmp	.+44     	; 0x832 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     806:	6d 81       	ldd	r22, Y+5	; 0x05
     808:	7e 81       	ldd	r23, Y+6	; 0x06
     80a:	8f 81       	ldd	r24, Y+7	; 0x07
     80c:	98 85       	ldd	r25, Y+8	; 0x08
     80e:	f3 d8       	rcall	.-3610   	; 0xfffff9f6 <__eeprom_end+0xff7ef8f8>
     810:	dc 01       	movw	r26, r24
     812:	cb 01       	movw	r24, r22
     814:	9a 87       	std	Y+10, r25	; 0x0a
     816:	89 87       	std	Y+9, r24	; 0x09
     818:	89 85       	ldd	r24, Y+9	; 0x09
     81a:	9a 85       	ldd	r25, Y+10	; 0x0a
     81c:	9e 87       	std	Y+14, r25	; 0x0e
     81e:	8d 87       	std	Y+13, r24	; 0x0d
     820:	8d 85       	ldd	r24, Y+13	; 0x0d
     822:	9e 85       	ldd	r25, Y+14	; 0x0e
     824:	8c 01       	movw	r16, r24
     826:	c8 01       	movw	r24, r16
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <main+0x102>
     82c:	8c 01       	movw	r16, r24
     82e:	1e 87       	std	Y+14, r17	; 0x0e
     830:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(50);
	#endif	


	//Alle Komponenten initialisieren
	initialize();
     832:	6a df       	rcall	.-300    	; 0x708 <initialize>
     834:	01 c0       	rjmp	.+2      	; 0x838 <main+0x112>

			pwmRefreshOutputs();

			timerFlags &= ~(1<<TF_10SSECOND);
		}
	} //while
     836:	00 00       	nop
	//Hauptregelschleife zur zeitlichen Steuerung	
	while (1) //For ever
	{
		//RGB-Led-Soft-PWM-Regelung mit jedem Durchlauf aufrufen
		//damit die LEDs mit möglichst hohem Takt refreshed werden -> kein Flackern
		rgbRefreshOutputs();
     838:	f4 d2       	rcall	.+1512   	; 0xe22 <rgbRefreshOutputs>
		led2Mode = LED_ON;  led2_white();*/



		//Auswertung der TimerFlags
		if (bit_is_set(timerFlags, TF_SECOND)) 
     83a:	80 91 dd 00 	lds	r24, 0x00DD
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	84 70       	andi	r24, 0x04	; 4
     844:	90 70       	andi	r25, 0x00	; 0
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	49 f0       	breq	.+18     	; 0x85c <main+0x136>
		{
			//Neuer Messwert...
			adcReadValue();
     84a:	06 dd       	rcall	.-1524   	; 0x258 <adcReadValue>

			//Akkuanzeige aktualisieren
			accuRefreshDisplay();
     84c:	59 dc       	rcall	.-1870   	; 0x100 <accuRefreshDisplay>

			timerFlags &= ~(1<<TF_SECOND);
     84e:	80 91 dd 00 	lds	r24, 0x00DD
     852:	8b 7f       	andi	r24, 0xFB	; 251
     854:	80 93 dd 00 	sts	0x00DD, r24
			continue;
     858:	00 00       	nop

			pwmRefreshOutputs();

			timerFlags &= ~(1<<TF_10SSECOND);
		}
	} //while
     85a:	ee cf       	rjmp	.-36     	; 0x838 <main+0x112>

			timerFlags &= ~(1<<TF_SECOND);
			continue;
		}

		if (bit_is_set(timerFlags, TF_10SSECOND)) 
     85c:	80 91 dd 00 	lds	r24, 0x00DD
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	88 70       	andi	r24, 0x08	; 8
     866:	90 70       	andi	r25, 0x00	; 0
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	29 f3       	breq	.-54     	; 0x836 <main+0x110>
		{
			//Tasterzustand auswerten
			btnRefreshState();
     86c:	86 dd       	rcall	.-1268   	; 0x37a <btnRefreshState>

			//Folgezustand für Controller-Statemachine ermitteln
			stateNextState();
     86e:	ab d4       	rcall	.+2390   	; 0x11c6 <stateNextState>

			pwmRefreshOutputs();
     870:	d3 d0       	rcall	.+422    	; 0xa18 <pwmRefreshOutputs>

			timerFlags &= ~(1<<TF_10SSECOND);
     872:	80 91 dd 00 	lds	r24, 0x00DD
     876:	87 7f       	andi	r24, 0xF7	; 247
     878:	80 93 dd 00 	sts	0x00DD, r24
		}
	} //while
     87c:	dd cf       	rjmp	.-70     	; 0x838 <main+0x112>

0000087e <eepromIsProgrammed>:

// Dummyelement (Adresse 0 sollte nicht genutzt werden)
uint8_t eeDoNotUse[1] EEMEM = { [0x000]   = 0x00 };

uint8_t eepromIsProgrammed(void)
{
     87e:	df 93       	push	r29
     880:	cf 93       	push	r28
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
	//Bei leerem EEPROM wird immer 0xFF gelesen
	//Wenn 0xDD drin steht muss es also einmal programmiert worden sein
	return (eeprom_read_byte(&eeFooByte) == EEFOO_DEF);
     886:	8d ee       	ldi	r24, 0xED	; 237
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	fb d9       	rcall	.-3082   	; 0xfffffc82 <__eeprom_end+0xff7efb84>
     88c:	98 2f       	mov	r25, r24
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	9d 3d       	cpi	r25, 0xDD	; 221
     892:	09 f0       	breq	.+2      	; 0x896 <eepromIsProgrammed+0x18>
     894:	80 e0       	ldi	r24, 0x00	; 0
}
     896:	cf 91       	pop	r28
     898:	df 91       	pop	r29
     89a:	08 95       	ret

0000089c <eepromLoadData>:

#ifdef PROGRAMMING_ENABLED
void eepromLoadData(void)
{
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
	//Werte für die PWM-Ausgabe pro Controllerzustand aus EEPROM lesen
	pwmTableLoadFromEEPROM();
     8a4:	93 d1       	rcall	.+806    	; 0xbcc <pwmTableLoadFromEEPROM>
	
	//Werte für die Bestimmung der Restlaufzeit lesen
	accuLoadVoltageLevelsFromEEPROM();
     8a6:	e2 db       	rcall	.-2108   	; 0x6c <accuLoadVoltageLevelsFromEEPROM>
}
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <eepromStoreData>:

void eepromStoreData(void)
{
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
	//Werte für die PWM-Ausgabe
	pwmTableStoreToEEPROM();
     8b6:	99 d1       	rcall	.+818    	; 0xbea <pwmTableStoreToEEPROM>
	
    //Spannungswerte für Füllstandsanzeige
	accuStoreVoltageLevelsToEEPROM();
     8b8:	e8 db       	rcall	.-2096   	; 0x8a <accuStoreVoltageLevelsToEEPROM>
}
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <eepromSetActiveFlag>:
#endif

void eepromSetActiveFlag(const uint8_t value) 
{
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	0f 92       	push	r0
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	89 83       	std	Y+1, r24	; 0x01
	eeprom_write_byte(&eeActiveFlag, value);
     8cc:	8e ee       	ldi	r24, 0xEE	; 238
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	69 81       	ldd	r22, Y+1	; 0x01
     8d2:	ed d9       	rcall	.-3110   	; 0xfffffcae <__eeprom_end+0xff7efbb0>
}
     8d4:	0f 90       	pop	r0
     8d6:	cf 91       	pop	r28
     8d8:	df 91       	pop	r29
     8da:	08 95       	ret

000008dc <eepromGetActiveFlag>:


uint8_t eepromGetActiveFlag()
{
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
	return eeprom_read_byte(&eeActiveFlag);
     8e4:	8e ee       	ldi	r24, 0xEE	; 238
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	cc d9       	rcall	.-3176   	; 0xfffffc82 <__eeprom_end+0xff7efb84>
}
     8ea:	cf 91       	pop	r28
     8ec:	df 91       	pop	r29
     8ee:	08 95       	ret

000008f0 <pwmInitialize>:
 * 
 * Initialisieren der PWM-Erzeugung, Setzen der Ausgänge
 * 
 ***************************************************************************/
void pwmInitialize(void)
{
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62

	//PWM setup
	//TCCR1A und TCCR1B werden erst bei "pwmEnable" gesetzt

	//Pins als Ausgänge setzen
	PWM_DDR |= (1<<PWM1_PIN) | (1<<PWM2_PIN);
     8f8:	8a e3       	ldi	r24, 0x3A	; 58
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	2a e3       	ldi	r18, 0x3A	; 58
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	f9 01       	movw	r30, r18
     902:	20 81       	ld	r18, Z
     904:	20 66       	ori	r18, 0x60	; 96
     906:	fc 01       	movw	r30, r24
     908:	20 83       	st	Z, r18

	//Ausgänge auf 0
	OCR1A = 0;
     90a:	8a e4       	ldi	r24, 0x4A	; 74
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	11 82       	std	Z+1, r1	; 0x01
     912:	10 82       	st	Z, r1
	OCR1B = 0;
     914:	88 e4       	ldi	r24, 0x48	; 72
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	fc 01       	movw	r30, r24
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	10 82       	st	Z, r1

	pwmOutput.pwm1Soll = 0;
     91e:	10 92 f0 00 	sts	0x00F0, r1
	pwmOutput.pwm2Soll = 0;
     922:	10 92 f2 00 	sts	0x00F2, r1

	//PWM muss nach der Initialisierung mit pwmEnable() noch aktiviert werden!
}
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	08 95       	ret

0000092c <pwmEnable>:
 *	PWM-Erzeugung aktivieren
 *	Eine mögliche Invertierung einstellen.
 *	Optionale Aktivierung des 2. Ausgangs.
 ***************************************************************************/
void pwmEnable(void)
{
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	00 d0       	rcall	.+0      	; 0x932 <pwmEnable+0x6>
     932:	0f 92       	push	r0
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
	uint8_t tccr1a = 0;
     938:	19 82       	std	Y+1, r1	; 0x01
	//Mögliche Invertierung beachten
	uint8_t pwm1Inverted = (pwmTable[0] == PWM_MODE_KONST_RATIO_INV);
     93a:	90 91 71 00 	lds	r25, 0x0071
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	94 30       	cpi	r25, 0x04	; 4
     942:	09 f0       	breq	.+2      	; 0x946 <pwmEnable+0x1a>
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t pwm2Inverted = (pwmTable[1] == PWM_MODE_KONST_RATIO_INV);
     948:	90 91 72 00 	lds	r25, 0x0072
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	94 30       	cpi	r25, 0x04	; 4
     950:	09 f0       	breq	.+2      	; 0x954 <pwmEnable+0x28>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	8b 83       	std	Y+3, r24	; 0x03

	if (pwm1Inverted) {	tccr1a = (1<<COM1A1) | (1<<COM1A0); } else { tccr1a = (1<<COM1A1) | (0<<COM1A0); }
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	88 23       	and	r24, r24
     95a:	19 f0       	breq	.+6      	; 0x962 <pwmEnable+0x36>
     95c:	80 ec       	ldi	r24, 0xC0	; 192
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	02 c0       	rjmp	.+4      	; 0x966 <pwmEnable+0x3a>
     962:	80 e8       	ldi	r24, 0x80	; 128
     964:	89 83       	std	Y+1, r24	; 0x01

	//2. Ausgang nur bei Bedarf aktivieren
	if (pwm2Enabled) {
     966:	80 91 d8 00 	lds	r24, 0x00D8
     96a:	88 23       	and	r24, r24
     96c:	51 f0       	breq	.+20     	; 0x982 <pwmEnable+0x56>
		if (pwm2Inverted) {	tccr1a |= (1<<COM1B1) | (1<<COM1B0);} else {	tccr1a |= (1<<COM1B1) | (0<<COM1B0);}
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	88 23       	and	r24, r24
     972:	21 f0       	breq	.+8      	; 0x97c <pwmEnable+0x50>
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	80 63       	ori	r24, 0x30	; 48
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	03 c0       	rjmp	.+6      	; 0x982 <pwmEnable+0x56>
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	80 62       	ori	r24, 0x20	; 32
     980:	89 83       	std	Y+1, r24	; 0x01
	}

	TCCR1A = (0<<WGM11) | (1<<WGM10) | tccr1a;
     982:	8f e4       	ldi	r24, 0x4F	; 79
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	29 81       	ldd	r18, Y+1	; 0x01
     988:	21 60       	ori	r18, 0x01	; 1
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
	#ifdef PROG_PWM_CS_ENABLED
		TCCR1B = pwmClockSelectTable[pwmClockSelectIndex];
	#else
		TCCR1B = PWM_CLOCKSELECT_DEFAULT;
     98e:	8e e4       	ldi	r24, 0x4E	; 78
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	23 e0       	ldi	r18, 0x03	; 3
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18
	#endif
}
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	cf 91       	pop	r28
     9a0:	df 91       	pop	r29
     9a2:	08 95       	ret

000009a4 <pwmDisable>:

/***************************************************************************
 ***************************************************************************/
void pwmDisable(void)
{
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
	//TCCR1A &= ~((1<<COM1A1)|(0<<COM1A0) | (1<<COM1B1)|(0<<COM1B0));
	pwmOutput.pwm1Soll = 0;
     9ac:	10 92 f0 00 	sts	0x00F0, r1
	pwmOutput.pwm2Soll = 0;
     9b0:	10 92 f2 00 	sts	0x00F2, r1
	PWM1_REG = 0x00;
     9b4:	8a e4       	ldi	r24, 0x4A	; 74
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	fc 01       	movw	r30, r24
     9ba:	10 82       	st	Z, r1
	PWM2_REG = 0x00;
     9bc:	88 e4       	ldi	r24, 0x48	; 72
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	fc 01       	movw	r30, r24
     9c2:	10 82       	st	Z, r1
}
     9c4:	cf 91       	pop	r28
     9c6:	df 91       	pop	r29
     9c8:	08 95       	ret

000009ca <pwmRefreshSingleOutput>:
 * 
 * Funktionsaufruf erfolgt jede 1/10 Sekunde über Ereignisschleife in controller.c
 * 
 ***************************************************************************/
void pwmRefreshSingleOutput(volatile uint8_t *pwmRegister, uint8_t sollValue)
{
     9ca:	df 93       	push	r29
     9cc:	cf 93       	push	r28
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <pwmRefreshSingleOutput+0x6>
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <pwmRefreshSingleOutput+0x8>
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	9b 83       	std	Y+3, r25	; 0x03
     9d8:	8a 83       	std	Y+2, r24	; 0x02
     9da:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t istValue = *pwmRegister;
     9dc:	8a 81       	ldd	r24, Y+2	; 0x02
     9de:	9b 81       	ldd	r25, Y+3	; 0x03
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	89 83       	std	Y+1, r24	; 0x01

	if ((istValue > sollValue) || (istValue > 30)) {
     9e6:	99 81       	ldd	r25, Y+1	; 0x01
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	89 17       	cp	r24, r25
     9ec:	18 f0       	brcs	.+6      	; 0x9f4 <pwmRefreshSingleOutput+0x2a>
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	8f 31       	cpi	r24, 0x1F	; 31
     9f2:	18 f0       	brcs	.+6      	; 0x9fa <pwmRefreshSingleOutput+0x30>
		//Soll kleiner als Ist, oder Ist hat einen Wert von 50 überschritten
		//dann Sollwert direkt setzen
		istValue = sollValue;
     9f4:	8c 81       	ldd	r24, Y+4	; 0x04
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <pwmRefreshSingleOutput+0x36>
	}
	else
	{
		//Softstart
		istValue += 1; 
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	89 83       	std	Y+1, r24	; 0x01
	}

	//Sollwert <= IstwertFalls -> sofort übernehmen
	*pwmRegister = istValue;
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	9b 81       	ldd	r25, Y+3	; 0x03
     a04:	29 81       	ldd	r18, Y+1	; 0x01
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	cf 91       	pop	r28
     a14:	df 91       	pop	r29
     a16:	08 95       	ret

00000a18 <pwmRefreshOutputs>:

/***************************************************************************
	Sollwerte an die Ausgänge weitergeben
 ***************************************************************************/
void pwmRefreshOutputs(void)
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	00 d0       	rcall	.+0      	; 0xa22 <pwmRefreshOutputs+0xa>
     a22:	00 d0       	rcall	.+0      	; 0xa24 <pwmRefreshOutputs+0xc>
     a24:	00 d0       	rcall	.+0      	; 0xa26 <pwmRefreshOutputs+0xe>
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
	//Interrupts aus...
	//Sicherung der Interrupts ist egal, es werden eh nur welche für den Timer genutzt
	cli();
     a2a:	f8 94       	cli
	
	//Lokale Variablen...
	uint8_t pwm1Soll 			= pwmOutput.pwm1Soll;
     a2c:	80 91 f0 00 	lds	r24, 0x00F0
     a30:	89 83       	std	Y+1, r24	; 0x01
	uint8_t pwm2Soll 			= pwmOutput.pwm2Soll;
     a32:	80 91 f2 00 	lds	r24, 0x00F2
     a36:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t pwm1ProgVoltage 	= pwmOutput.pwm1ProgVoltage;
     a38:	80 91 f1 00 	lds	r24, 0x00F1
     a3c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t pwm2ProgVoltage 	= pwmOutput.pwm2ProgVoltage;
     a3e:	80 91 f3 00 	lds	r24, 0x00F3
     a42:	8c 83       	std	Y+4, r24	; 0x04
	
	uint8_t pwm1Mode = pwmTable[0];
     a44:	80 91 71 00 	lds	r24, 0x0071
     a48:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t pwm2Mode = pwmTable[1];
     a4a:	80 91 72 00 	lds	r24, 0x0072
     a4e:	8e 83       	std	Y+6, r24	; 0x06
	
	//Ausgang 1	
	if (0x00 == pwm1Soll) 						 { PWM1_REG = 0x00; } else
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	88 23       	and	r24, r24
     a54:	29 f4       	brne	.+10     	; 0xa60 <pwmRefreshOutputs+0x48>
     a56:	8a e4       	ldi	r24, 0x4A	; 74
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc 01       	movw	r30, r24
     a5c:	10 82       	st	Z, r1
     a5e:	30 c0       	rjmp	.+96     	; 0xac0 <pwmRefreshOutputs+0xa8>
	if (PWM_MODE_KONST_RATIO 		== pwm1Mode) { PWM1_REG = pwm1Soll; } else
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	88 23       	and	r24, r24
     a64:	31 f4       	brne	.+12     	; 0xa72 <pwmRefreshOutputs+0x5a>
     a66:	8a e4       	ldi	r24, 0x4A	; 74
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	29 81       	ldd	r18, Y+1	; 0x01
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
     a70:	27 c0       	rjmp	.+78     	; 0xac0 <pwmRefreshOutputs+0xa8>
	if (PWM_MODE_KONST_RATIO_INV	== pwm1Mode) { PWM1_REG = pwm1Soll; } else
     a72:	8d 81       	ldd	r24, Y+5	; 0x05
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	31 f4       	brne	.+12     	; 0xa84 <pwmRefreshOutputs+0x6c>
     a78:	8a e4       	ldi	r24, 0x4A	; 74
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	29 81       	ldd	r18, Y+1	; 0x01
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
     a82:	1e c0       	rjmp	.+60     	; 0xac0 <pwmRefreshOutputs+0xa8>
	if (PWM_MODE_KONST_VOLT 		== pwm1Mode) { PWM1_REG = pwmGetRegulateOutputValue(pwm1Soll, pwm1ProgVoltage); } else 
     a84:	8d 81       	ldd	r24, Y+5	; 0x05
     a86:	83 30       	cpi	r24, 0x03	; 3
     a88:	41 f4       	brne	.+16     	; 0xa9a <pwmRefreshOutputs+0x82>
     a8a:	0a e4       	ldi	r16, 0x4A	; 74
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	6b 81       	ldd	r22, Y+3	; 0x03
     a92:	5a d0       	rcall	.+180    	; 0xb48 <pwmGetRegulateOutputValue>
     a94:	f8 01       	movw	r30, r16
     a96:	80 83       	st	Z, r24
     a98:	13 c0       	rjmp	.+38     	; 0xac0 <pwmRefreshOutputs+0xa8>
	if (PWM_MODE_KONST_RATIO_SOFT 	== pwm1Mode) { pwmRefreshSingleOutput(&PWM1_REG, pwm1Soll); } else
     a9a:	8d 81       	ldd	r24, Y+5	; 0x05
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	29 f4       	brne	.+10     	; 0xaaa <pwmRefreshOutputs+0x92>
     aa0:	8a e4       	ldi	r24, 0x4A	; 74
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	69 81       	ldd	r22, Y+1	; 0x01
     aa6:	91 df       	rcall	.-222    	; 0x9ca <pwmRefreshSingleOutput>
     aa8:	0b c0       	rjmp	.+22     	; 0xac0 <pwmRefreshOutputs+0xa8>
	if (PWM_MODE_KONST_VOLT_SOFT 	== pwm1Mode) { pwmRefreshSingleOutput(&PWM1_REG, pwmGetRegulateOutputValue(pwm1Soll, pwm1ProgVoltage)); } 
     aaa:	8d 81       	ldd	r24, Y+5	; 0x05
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	41 f4       	brne	.+16     	; 0xac0 <pwmRefreshOutputs+0xa8>
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	6b 81       	ldd	r22, Y+3	; 0x03
     ab4:	49 d0       	rcall	.+146    	; 0xb48 <pwmGetRegulateOutputValue>
     ab6:	28 2f       	mov	r18, r24
     ab8:	8a e4       	ldi	r24, 0x4A	; 74
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	62 2f       	mov	r22, r18
     abe:	85 df       	rcall	.-246    	; 0x9ca <pwmRefreshSingleOutput>
	
	//Ausgang2
	if (0x00 == pwm2Soll) 						 { PWM2_REG = 0x00; } else
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	88 23       	and	r24, r24
     ac4:	29 f4       	brne	.+10     	; 0xad0 <pwmRefreshOutputs+0xb8>
     ac6:	88 e4       	ldi	r24, 0x48	; 72
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	fc 01       	movw	r30, r24
     acc:	10 82       	st	Z, r1
     ace:	30 c0       	rjmp	.+96     	; 0xb30 <pwmRefreshOutputs+0x118>
	if (PWM_MODE_KONST_RATIO 		== pwm2Mode) { PWM2_REG = pwm2Soll; } else
     ad0:	8e 81       	ldd	r24, Y+6	; 0x06
     ad2:	88 23       	and	r24, r24
     ad4:	31 f4       	brne	.+12     	; 0xae2 <pwmRefreshOutputs+0xca>
     ad6:	88 e4       	ldi	r24, 0x48	; 72
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	2a 81       	ldd	r18, Y+2	; 0x02
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
     ae0:	27 c0       	rjmp	.+78     	; 0xb30 <pwmRefreshOutputs+0x118>
	if (PWM_MODE_KONST_RATIO_INV	== pwm2Mode) { PWM2_REG = pwm2Soll; } else
     ae2:	8e 81       	ldd	r24, Y+6	; 0x06
     ae4:	84 30       	cpi	r24, 0x04	; 4
     ae6:	31 f4       	brne	.+12     	; 0xaf4 <pwmRefreshOutputs+0xdc>
     ae8:	88 e4       	ldi	r24, 0x48	; 72
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	2a 81       	ldd	r18, Y+2	; 0x02
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
     af2:	1e c0       	rjmp	.+60     	; 0xb30 <pwmRefreshOutputs+0x118>
	if (PWM_MODE_KONST_VOLT 		== pwm2Mode) { PWM2_REG = pwmGetRegulateOutputValue(pwm2Soll, pwm2ProgVoltage); } else
     af4:	8e 81       	ldd	r24, Y+6	; 0x06
     af6:	83 30       	cpi	r24, 0x03	; 3
     af8:	41 f4       	brne	.+16     	; 0xb0a <pwmRefreshOutputs+0xf2>
     afa:	08 e4       	ldi	r16, 0x48	; 72
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	6c 81       	ldd	r22, Y+4	; 0x04
     b02:	22 d0       	rcall	.+68     	; 0xb48 <pwmGetRegulateOutputValue>
     b04:	f8 01       	movw	r30, r16
     b06:	80 83       	st	Z, r24
     b08:	13 c0       	rjmp	.+38     	; 0xb30 <pwmRefreshOutputs+0x118>
	if (PWM_MODE_KONST_RATIO_SOFT 	== pwm2Mode) { pwmRefreshSingleOutput(&PWM2_REG, pwm2Soll); } else
     b0a:	8e 81       	ldd	r24, Y+6	; 0x06
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	29 f4       	brne	.+10     	; 0xb1a <pwmRefreshOutputs+0x102>
     b10:	88 e4       	ldi	r24, 0x48	; 72
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	6a 81       	ldd	r22, Y+2	; 0x02
     b16:	59 df       	rcall	.-334    	; 0x9ca <pwmRefreshSingleOutput>
     b18:	0b c0       	rjmp	.+22     	; 0xb30 <pwmRefreshOutputs+0x118>
	if (PWM_MODE_KONST_VOLT_SOFT 	== pwm2Mode) { pwmRefreshSingleOutput(&PWM2_REG, pwmGetRegulateOutputValue(pwm2Soll, pwm2ProgVoltage)); } 
     b1a:	8e 81       	ldd	r24, Y+6	; 0x06
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	41 f4       	brne	.+16     	; 0xb30 <pwmRefreshOutputs+0x118>
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	6c 81       	ldd	r22, Y+4	; 0x04
     b24:	11 d0       	rcall	.+34     	; 0xb48 <pwmGetRegulateOutputValue>
     b26:	28 2f       	mov	r18, r24
     b28:	88 e4       	ldi	r24, 0x48	; 72
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	62 2f       	mov	r22, r18
     b2e:	4d df       	rcall	.-358    	; 0x9ca <pwmRefreshSingleOutput>

	//Interrupts wieder an
	sei();
     b30:	78 94       	sei
}
     b32:	26 96       	adiw	r28, 0x06	; 6
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	cf 91       	pop	r28
     b40:	df 91       	pop	r29
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <pwmGetRegulateOutputValue>:
/***************************************************************************
 *	Berechnung des PWM-Soll-Wertes aus dem vorgegebem Soll und der Akkuspannung beim Einstellen des Solls.
 *  Entsprechend der aktuellen Spannung wird das neue Soll berechnet.
 ***************************************************************************/
uint8_t pwmGetRegulateOutputValue(const uint8_t pwmValue, const uint8_t pwmProgVoltage) 
{
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <pwmGetRegulateOutputValue+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <pwmGetRegulateOutputValue+0x8>
     b50:	0f 92       	push	r0
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	8c 83       	std	Y+4, r24	; 0x04
     b58:	6d 83       	std	Y+5, r22	; 0x05
	#ifdef ADC_LOW_RES
		uint8_t currentVoltage = currentADCValue;
	#else
		uint8_t currentVoltage = currentADCValue >> 2;
     b5a:	80 91 ee 00 	lds	r24, 0x00EE
     b5e:	90 91 ef 00 	lds	r25, 0x00EF
     b62:	96 95       	lsr	r25
     b64:	87 95       	ror	r24
     b66:	96 95       	lsr	r25
     b68:	87 95       	ror	r24
     b6a:	89 83       	std	Y+1, r24	; 0x01
	#endif	


	if (currentVoltage 	== 0) { return 0x00; };
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	88 23       	and	r24, r24
     b70:	11 f4       	brne	.+4      	; 0xb76 <pwmGetRegulateOutputValue+0x2e>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	23 c0       	rjmp	.+70     	; 0xbbc <pwmGetRegulateOutputValue+0x74>
	if (pwmValue        == 0) { return 0x00; };
     b76:	8c 81       	ldd	r24, Y+4	; 0x04
     b78:	88 23       	and	r24, r24
     b7a:	11 f4       	brne	.+4      	; 0xb80 <pwmGetRegulateOutputValue+0x38>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	1e c0       	rjmp	.+60     	; 0xbbc <pwmGetRegulateOutputValue+0x74>



	uint16_t targetPWM = (pwmProgVoltage * pwmValue);
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	22 2f       	mov	r18, r18
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	b9 01       	movw	r22, r18
     b8e:	43 d8       	rcall	.-3962   	; 0xfffffc16 <__eeprom_end+0xff7efb18>
     b90:	9b 83       	std	Y+3, r25	; 0x03
     b92:	8a 83       	std	Y+2, r24	; 0x02
	
	targetPWM = (targetPWM + 1)  / currentVoltage;
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	9b 81       	ldd	r25, Y+3	; 0x03
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	29 81       	ldd	r18, Y+1	; 0x01
     b9c:	22 2f       	mov	r18, r18
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	b9 01       	movw	r22, r18
     ba2:	4b d8       	rcall	.-3946   	; 0xfffffc3a <__eeprom_end+0xff7efb3c>
     ba4:	9b 01       	movw	r18, r22
     ba6:	3b 83       	std	Y+3, r19	; 0x03
     ba8:	2a 83       	std	Y+2, r18	; 0x02
	
	//Auf max. 8bit beschränken
	if (targetPWM > 0x00FF) { 
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	9b 81       	ldd	r25, Y+3	; 0x03
     bae:	8f 3f       	cpi	r24, 0xFF	; 255
     bb0:	91 05       	cpc	r25, r1
     bb2:	19 f0       	breq	.+6      	; 0xbba <pwmGetRegulateOutputValue+0x72>
     bb4:	10 f0       	brcs	.+4      	; 0xbba <pwmGetRegulateOutputValue+0x72>
		return 0xFF; 
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <pwmGetRegulateOutputValue+0x74>
	} else {
		return (uint8_t) targetPWM;
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <pwmTableLoadFromEEPROM>:
	 /*Dimmstufe 3*/ 	0xFF, 210, 					0xFF, 210,
	};

//Werte aus dem Speicher lesen
void pwmTableLoadFromEEPROM(void)
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	eeprom_read_block(pwmTable, eePwmTable, sizeof(eePwmTable));
     bd4:	81 e7       	ldi	r24, 0x71	; 113
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	20 ef       	ldi	r18, 0xF0	; 240
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	b9 01       	movw	r22, r18
     bde:	4e e0       	ldi	r20, 0x0E	; 14
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	3f d8       	rcall	.-3970   	; 0xfffffc62 <__eeprom_end+0xff7efb64>
	#ifdef PROG_PWM_CS_ENABLED
		pwmClockSelectIndex = eeprom_read_byte(&eePWMClockSelectIndex);
	#endif
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <pwmTableStoreToEEPROM>:

//Werte speichern
void pwmTableStoreToEEPROM(void)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	eeprom_write_block(pwmTable, eePwmTable, sizeof(eePwmTable));
     bf2:	81 e7       	ldi	r24, 0x71	; 113
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	20 ef       	ldi	r18, 0xF0	; 240
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	b9 01       	movw	r22, r18
     bfc:	4e e0       	ldi	r20, 0x0E	; 14
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	4d d8       	rcall	.-3942   	; 0xfffffc9c <__eeprom_end+0xff7efb9e>
	#ifdef PROG_PWM_CS_ENABLED
		eeprom_write_byte(&eePWMClockSelectIndex, pwmClockSelectIndex);
	#endif
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <pwmLoadDefaults>:


void pwmLoadDefaults(void)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	#ifdef PROG_PWM_CS_ENABLED
		pwmClockSelectIndex = PWM_CS_DEFAULT_INDEX;
	#endif
	pwmTable[0]  = PWM_MODE_KONST_VOLT_SOFT; 		pwmTable[1]  = PWM_MODE_KONST_VOLT_SOFT;
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	80 93 71 00 	sts	0x0071, r24
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	80 93 72 00 	sts	0x0072, r24
	pwmTable[2]  =   80;	pwmTable[3]  = 210;		pwmTable[4]  =   80;	pwmTable[5]  = 210;
     c1c:	80 e5       	ldi	r24, 0x50	; 80
     c1e:	80 93 73 00 	sts	0x0073, r24
     c22:	82 ed       	ldi	r24, 0xD2	; 210
     c24:	80 93 74 00 	sts	0x0074, r24
     c28:	80 e5       	ldi	r24, 0x50	; 80
     c2a:	80 93 75 00 	sts	0x0075, r24
     c2e:	82 ed       	ldi	r24, 0xD2	; 210
     c30:	80 93 76 00 	sts	0x0076, r24
	pwmTable[6]  =  120;	pwmTable[7]  = 210;		pwmTable[8]  =  120;	pwmTable[9]  = 210;
     c34:	88 e7       	ldi	r24, 0x78	; 120
     c36:	80 93 77 00 	sts	0x0077, r24
     c3a:	82 ed       	ldi	r24, 0xD2	; 210
     c3c:	80 93 78 00 	sts	0x0078, r24
     c40:	88 e7       	ldi	r24, 0x78	; 120
     c42:	80 93 79 00 	sts	0x0079, r24
     c46:	82 ed       	ldi	r24, 0xD2	; 210
     c48:	80 93 7a 00 	sts	0x007A, r24
	pwmTable[10] = 0xFF;	pwmTable[11] = 210;		pwmTable[12] = 0xFF;	pwmTable[13] = 210;
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	80 93 7b 00 	sts	0x007B, r24
     c52:	82 ed       	ldi	r24, 0xD2	; 210
     c54:	80 93 7c 00 	sts	0x007C, r24
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	80 93 7d 00 	sts	0x007D, r24
     c5e:	82 ed       	ldi	r24, 0xD2	; 210
     c60:	80 93 7e 00 	sts	0x007E, r24
}
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <pwmTableSaveCurrentValuesForPWM1>:
#endif



void pwmTableSaveCurrentValuesForPWM1(const uint8_t dimLevel)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <pwmTableSaveCurrentValuesForPWM1+0x6>
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef ADC_LOW_RES
 		uint8_t currentVoltage = currentADCValue;	
	#else
		uint8_t currentVoltage = currentADCValue >> 2;
     c76:	80 91 ee 00 	lds	r24, 0x00EE
     c7a:	90 91 ef 00 	lds	r25, 0x00EF
     c7e:	96 95       	lsr	r25
     c80:	87 95       	ror	r24
     c82:	96 95       	lsr	r25
     c84:	87 95       	ror	r24
     c86:	89 83       	std	Y+1, r24	; 0x01
	#endif
	pwmTable[dimLevel * 4 - 2] = pwmOutput.pwm1Soll;
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	02 97       	sbiw	r24, 0x02	; 2
     c98:	20 91 f0 00 	lds	r18, 0x00F0
     c9c:	8f 58       	subi	r24, 0x8F	; 143
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
	pwmTable[dimLevel * 4 - 1] = currentVoltage;
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	8f 58       	subi	r24, 0x8F	; 143
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	29 81       	ldd	r18, Y+1	; 0x01
     cba:	fc 01       	movw	r30, r24
     cbc:	20 83       	st	Z, r18

}
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <pwmTableSaveCurrentValuesForPWM2>:

void pwmTableSaveCurrentValuesForPWM2(const uint8_t dimLevel)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <pwmTableSaveCurrentValuesForPWM2+0x6>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef ADC_LOW_RES
 		uint8_t currentVoltage = currentADCValue;	
	#else
		uint8_t currentVoltage = currentADCValue >> 2;
     cd4:	80 91 ee 00 	lds	r24, 0x00EE
     cd8:	90 91 ef 00 	lds	r25, 0x00EF
     cdc:	96 95       	lsr	r25
     cde:	87 95       	ror	r24
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	89 83       	std	Y+1, r24	; 0x01
	#endif
	pwmTable[dimLevel * 4 + 0] = pwmOutput.pwm2Soll;
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	20 91 f2 00 	lds	r18, 0x00F2
     cf8:	8f 58       	subi	r24, 0x8F	; 143
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
	pwmTable[dimLevel * 4 + 1] = currentVoltage;
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	8f 58       	subi	r24, 0x8F	; 143
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	29 81       	ldd	r18, Y+1	; 0x01
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
}
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <pwmTableSetOutPut>:

void pwmTableSetOutPut(const uint8_t dimLevel)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	89 83       	std	Y+1, r24	; 0x01
	//PWM-Wert aus der Tabelle ermitteln
	if (dimLevel > 4) return;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	85 30       	cpi	r24, 0x05	; 5
     d34:	08 f0       	brcs	.+2      	; 0xd38 <pwmTableSetOutPut+0x14>
     d36:	40 c0       	rjmp	.+128    	; 0xdb8 <pwmTableSetOutPut+0x94>

	if (dimLevel == 0)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	88 23       	and	r24, r24
     d3c:	29 f4       	brne	.+10     	; 0xd48 <pwmTableSetOutPut+0x24>
	{
		pwmOutput.pwm1Soll = 0;
     d3e:	10 92 f0 00 	sts	0x00F0, r1
		pwmOutput.pwm2Soll = 0;
     d42:	10 92 f2 00 	sts	0x00F2, r1
		return;
     d46:	39 c0       	rjmp	.+114    	; 0xdba <pwmTableSetOutPut+0x96>
	}

	pwmOutput.pwm1Soll 			= pwmTable[dimLevel * 4 - 2];
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	02 97       	sbiw	r24, 0x02	; 2
     d58:	8f 58       	subi	r24, 0x8F	; 143
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	fc 01       	movw	r30, r24
     d5e:	80 81       	ld	r24, Z
     d60:	80 93 f0 00 	sts	0x00F0, r24
	pwmOutput.pwm1ProgVoltage 	= pwmTable[dimLevel * 4 - 1];
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	8f 58       	subi	r24, 0x8F	; 143
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	fc 01       	movw	r30, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	80 93 f1 00 	sts	0x00F1, r24

	pwmOutput.pwm2Soll 			= pwmTable[dimLevel * 4 - 0];
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	8f 58       	subi	r24, 0x8F	; 143
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	80 93 f2 00 	sts	0x00F2, r24
	pwmOutput.pwm2ProgVoltage 	= pwmTable[dimLevel * 4 + 1];
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	8f 58       	subi	r24, 0x8F	; 143
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	fc 01       	movw	r30, r24
     db0:	80 81       	ld	r24, Z
     db2:	80 93 f3 00 	sts	0x00F3, r24
     db6:	01 c0       	rjmp	.+2      	; 0xdba <pwmTableSetOutPut+0x96>
}

void pwmTableSetOutPut(const uint8_t dimLevel)
{
	//PWM-Wert aus der Tabelle ermitteln
	if (dimLevel > 4) return;
     db8:	00 00       	nop
	pwmOutput.pwm1Soll 			= pwmTable[dimLevel * 4 - 2];
	pwmOutput.pwm1ProgVoltage 	= pwmTable[dimLevel * 4 - 1];

	pwmOutput.pwm2Soll 			= pwmTable[dimLevel * 4 - 0];
	pwmOutput.pwm2ProgVoltage 	= pwmTable[dimLevel * 4 + 1];
}
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <rgbInitialize>:
							RGB(127,  20,  20), //2 Hellrot
							RGB(  0,   0,   0), //11 Aus	
						};

void rgbInitialize(void)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
	//Pins als Output setzen
	RGB_LED1_DDR |= (1<<RGB_LED1_PIN_R)|(1<<RGB_LED1_PIN_G)|(1<<RGB_LED1_PIN_B);
     dca:	8a e3       	ldi	r24, 0x3A	; 58
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	2a e3       	ldi	r18, 0x3A	; 58
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	f9 01       	movw	r30, r18
     dd4:	20 81       	ld	r18, Z
     dd6:	2e 60       	ori	r18, 0x0E	; 14
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
	RGB_LED2_DDR |= (1<<RGB_LED2_PIN_R)|(1<<RGB_LED2_PIN_G)|(1<<RGB_LED2_PIN_B);
     ddc:	87 e3       	ldi	r24, 0x37	; 55
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	27 e3       	ldi	r18, 0x37	; 55
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	20 81       	ld	r18, Z
     de8:	27 60       	ori	r18, 0x07	; 7
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
	
	//Alle Pins auf High - Gemeinsame Masse
	RGB_LED1_PORT |= (1<<RGB_LED1_PIN_R)|(1<<RGB_LED1_PIN_G)|(1<<RGB_LED1_PIN_B);
     dee:	8b e3       	ldi	r24, 0x3B	; 59
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	2b e3       	ldi	r18, 0x3B	; 59
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	f9 01       	movw	r30, r18
     df8:	20 81       	ld	r18, Z
     dfa:	2e 60       	ori	r18, 0x0E	; 14
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
	RGB_LED2_PORT |= (1<<RGB_LED2_PIN_R)|(1<<RGB_LED2_PIN_G)|(1<<RGB_LED2_PIN_B);
     e00:	88 e3       	ldi	r24, 0x38	; 56
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	28 e3       	ldi	r18, 0x38	; 56
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	f9 01       	movw	r30, r18
     e0a:	20 81       	ld	r18, Z
     e0c:	27 60       	ori	r18, 0x07	; 7
     e0e:	fc 01       	movw	r30, r24
     e10:	20 83       	st	Z, r18

	led1Mode = 0;
     e12:	44 24       	eor	r4, r4
	led2Mode = 0;
     e14:	66 24       	eor	r6, r6
	led1ColorIndex = 0;
     e16:	55 24       	eor	r5, r5
	led2ColorIndex = 0;
     e18:	77 24       	eor	r7, r7

	ledsDimDown = 0;
     e1a:	88 24       	eor	r8, r8
}
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <rgbRefreshOutputs>:

void rgbRefreshOutputs(void)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	2d 97       	sbiw	r28, 0x0d	; 13
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
	//Globale Variablen in lokalen Variablen Speichern um Speicherzugriffe zu sparen
	
	uint8_t led1r = colors[led1ColorIndex][0];
     e36:	85 2d       	mov	r24, r5
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	c9 01       	movw	r24, r18
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	81 58       	subi	r24, 0x81	; 129
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	fc 01       	movw	r30, r24
     e4c:	80 81       	ld	r24, Z
     e4e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t led1g = colors[led1ColorIndex][1];
     e50:	85 2d       	mov	r24, r5
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	c9 01       	movw	r24, r18
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	80 58       	subi	r24, 0x80	; 128
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	fc 01       	movw	r30, r24
     e66:	80 81       	ld	r24, Z
     e68:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t led1b = colors[led1ColorIndex][2];
     e6a:	85 2d       	mov	r24, r5
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	c9 01       	movw	r24, r18
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	8f 57       	subi	r24, 0x7F	; 127
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	fc 01       	movw	r30, r24
     e80:	80 81       	ld	r24, Z
     e82:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t led2r = colors[led2ColorIndex][0];
     e84:	87 2d       	mov	r24, r7
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	c9 01       	movw	r24, r18
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	81 58       	subi	r24, 0x81	; 129
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t led2g = colors[led2ColorIndex][1];
     e9e:	87 2d       	mov	r24, r7
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	c9 01       	movw	r24, r18
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	80 58       	subi	r24, 0x80	; 128
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	88 87       	std	Y+8, r24	; 0x08
	uint8_t led2b = colors[led2ColorIndex][2];
     eb8:	87 2d       	mov	r24, r7
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	c9 01       	movw	r24, r18
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	8f 57       	subi	r24, 0x7F	; 127
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	fc 01       	movw	r30, r24
     ece:	80 81       	ld	r24, Z
     ed0:	89 87       	std	Y+9, r24	; 0x09

	uint8_t leddim = (ledsDimDown);
     ed2:	89 82       	std	Y+1, r8	; 0x01
	if (!led2ColorIndex) leddim = 0; //nicht dimmen, wenn Led2 rot blinkt
     ed4:	87 2d       	mov	r24, r7
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <rgbRefreshOutputs+0xba>
     eda:	19 82       	std	Y+1, r1	; 0x01

	uint8_t softPwmCnt = time.softPwmCnt >> 1;
     edc:	80 91 fb 00 	lds	r24, 0x00FB
     ee0:	86 95       	lsr	r24
     ee2:	8a 87       	std	Y+10, r24	; 0x0a
	
	uint8_t ledport1 = RGB_LED1_PORT;
     ee4:	8b e3       	ldi	r24, 0x3B	; 59
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	fc 01       	movw	r30, r24
     eea:	80 81       	ld	r24, Z
     eec:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ledport2 = RGB_LED2_PORT;
     eee:	88 e3       	ldi	r24, 0x38	; 56
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fc 01       	movw	r30, r24
     ef4:	80 81       	ld	r24, Z
     ef6:	8b 83       	std	Y+3, r24	; 0x03

	//Blinkfrequenz 1/2 Sekunde (5*1/10s)
	uint8_t blinkOn = time.sec10 > 1; //< TIMER_CLK_HALF_SEC_PART;
     ef8:	90 91 f6 00 	lds	r25, 0x00F6
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	92 30       	cpi	r25, 0x02	; 2
     f00:	08 f4       	brcc	.+2      	; 0xf04 <rgbRefreshOutputs+0xe2>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t led1On = (led1Mode == LED_ON) || ((led1Mode == LED_BLINK) && (blinkOn));
     f06:	84 2d       	mov	r24, r4
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	31 f0       	breq	.+12     	; 0xf18 <rgbRefreshOutputs+0xf6>
     f0c:	84 2d       	mov	r24, r4
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	31 f4       	brne	.+12     	; 0xf1e <rgbRefreshOutputs+0xfc>
     f12:	8b 85       	ldd	r24, Y+11	; 0x0b
     f14:	88 23       	and	r24, r24
     f16:	19 f0       	breq	.+6      	; 0xf1e <rgbRefreshOutputs+0xfc>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <rgbRefreshOutputs+0x100>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	8c 87       	std	Y+12, r24	; 0x0c
	uint8_t led2On = (led2Mode == LED_ON) || ((led2Mode == LED_BLINK) && (blinkOn));
     f24:	86 2d       	mov	r24, r6
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	31 f0       	breq	.+12     	; 0xf36 <rgbRefreshOutputs+0x114>
     f2a:	86 2d       	mov	r24, r6
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	31 f4       	brne	.+12     	; 0xf3c <rgbRefreshOutputs+0x11a>
     f30:	8b 85       	ldd	r24, Y+11	; 0x0b
     f32:	88 23       	and	r24, r24
     f34:	19 f0       	breq	.+6      	; 0xf3c <rgbRefreshOutputs+0x11a>
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <rgbRefreshOutputs+0x11e>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	8d 87       	std	Y+13, r24	; 0x0d


	//Alle Pins aus - auf high setzen, da Pins Low-Aktiv
	ledport1 |= (1<<RGB_LED1_PIN_R)|(1<<RGB_LED1_PIN_G)|(1<<RGB_LED1_PIN_B);
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	8e 60       	ori	r24, 0x0E	; 14
     f46:	8a 83       	std	Y+2, r24	; 0x02
	ledport2 |= (1<<RGB_LED2_PIN_R)|(1<<RGB_LED2_PIN_G)|(1<<RGB_LED2_PIN_B);
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	87 60       	ori	r24, 0x07	; 7
     f4c:	8b 83       	std	Y+3, r24	; 0x03
			RGB_LED1_PORT = ledport1;
			RGB_LED2_PORT = ledport2;
			return;
		}
	#else //Helligkeit bei der 5V liegt höher, kann also stärker reduziert werden
		if ((leddim) && (softPwmCnt % 8)) {
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	88 23       	and	r24, r24
     f52:	79 f0       	breq	.+30     	; 0xf72 <rgbRefreshOutputs+0x150>
     f54:	8a 85       	ldd	r24, Y+10	; 0x0a
     f56:	87 70       	andi	r24, 0x07	; 7
     f58:	88 23       	and	r24, r24
     f5a:	59 f0       	breq	.+22     	; 0xf72 <rgbRefreshOutputs+0x150>
			RGB_LED1_PORT = ledport1;
     f5c:	8b e3       	ldi	r24, 0x3B	; 59
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	2a 81       	ldd	r18, Y+2	; 0x02
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
			RGB_LED2_PORT = ledport2;
     f66:	88 e3       	ldi	r24, 0x38	; 56
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	2b 81       	ldd	r18, Y+3	; 0x03
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
			return;
     f70:	3a c0       	rjmp	.+116    	; 0xfe6 <rgbRefreshOutputs+0x1c4>
		}
	#endif

	if (led1On)
     f72:	8c 85       	ldd	r24, Y+12	; 0x0c
     f74:	88 23       	and	r24, r24
     f76:	a9 f0       	breq	.+42     	; 0xfa2 <rgbRefreshOutputs+0x180>
	{
		if (softPwmCnt < led1r)  ledport1 &= ~(1<<RGB_LED1_PIN_R); 
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	98 17       	cp	r25, r24
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <rgbRefreshOutputs+0x164>
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	8b 7f       	andi	r24, 0xFB	; 251
     f84:	8a 83       	std	Y+2, r24	; 0x02
		if (softPwmCnt < led1g)  ledport1 &= ~(1<<RGB_LED1_PIN_G); 
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	98 17       	cp	r25, r24
     f8c:	18 f4       	brcc	.+6      	; 0xf94 <rgbRefreshOutputs+0x172>
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	87 7f       	andi	r24, 0xF7	; 247
     f92:	8a 83       	std	Y+2, r24	; 0x02
		if (softPwmCnt < led1b)  ledport1 &= ~(1<<RGB_LED1_PIN_B); 
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	8e 81       	ldd	r24, Y+6	; 0x06
     f98:	98 17       	cp	r25, r24
     f9a:	18 f4       	brcc	.+6      	; 0xfa2 <rgbRefreshOutputs+0x180>
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	8d 7f       	andi	r24, 0xFD	; 253
     fa0:	8a 83       	std	Y+2, r24	; 0x02
	}

	if (led2On) 
     fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa4:	88 23       	and	r24, r24
     fa6:	a9 f0       	breq	.+42     	; 0xfd2 <rgbRefreshOutputs+0x1b0>
	{
		if (softPwmCnt < led2r)	ledport2 &= ~(1<<RGB_LED2_PIN_R); 
     fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     faa:	8f 81       	ldd	r24, Y+7	; 0x07
     fac:	98 17       	cp	r25, r24
     fae:	18 f4       	brcc	.+6      	; 0xfb6 <rgbRefreshOutputs+0x194>
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	8e 7f       	andi	r24, 0xFE	; 254
     fb4:	8b 83       	std	Y+3, r24	; 0x03
		if (softPwmCnt < led2g)	ledport2 &= ~(1<<RGB_LED2_PIN_G); 
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	98 17       	cp	r25, r24
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <rgbRefreshOutputs+0x1a2>
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	8d 7f       	andi	r24, 0xFD	; 253
     fc2:	8b 83       	std	Y+3, r24	; 0x03
		if (softPwmCnt < led2b)	ledport2 &= ~(1<<RGB_LED2_PIN_B); 
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	98 17       	cp	r25, r24
     fca:	18 f4       	brcc	.+6      	; 0xfd2 <rgbRefreshOutputs+0x1b0>
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	8b 7f       	andi	r24, 0xFB	; 251
     fd0:	8b 83       	std	Y+3, r24	; 0x03
	}

	RGB_LED1_PORT = ledport1;
     fd2:	8b e3       	ldi	r24, 0x3B	; 59
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	2a 81       	ldd	r18, Y+2	; 0x02
     fd8:	fc 01       	movw	r30, r24
     fda:	20 83       	st	Z, r18
	RGB_LED2_PORT = ledport2;
     fdc:	88 e3       	ldi	r24, 0x38	; 56
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	2b 81       	ldd	r18, Y+3	; 0x03
     fe2:	fc 01       	movw	r30, r24
     fe4:	20 83       	st	Z, r18
}
     fe6:	2d 96       	adiw	r28, 0x0d	; 13
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <leds_off>:

void leds_off()
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	led1Mode = LED_OFF;
    1000:	44 24       	eor	r4, r4
	led2Mode = LED_OFF;
    1002:	66 24       	eor	r6, r6
	rgbRefreshOutputs();
    1004:	0e df       	rcall	.-484    	; 0xe22 <rgbRefreshOutputs>

}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <led1_red>:

void led1_red() 		{ led1ColorIndex = CLR_RED; 	} 	
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	55 24       	eor	r5, r5
    1016:	53 94       	inc	r5
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <led2_red>:
void led2_red() 		{ led2ColorIndex = CLR_RED; 	} 	
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	77 24       	eor	r7, r7
    1028:	73 94       	inc	r7
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <led1_lightred>:
void led1_lightred() 	{ led1ColorIndex = CLR_LRED; 	}
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	0f 2e       	mov	r0, r31
    103a:	fa e0       	ldi	r31, 0x0A	; 10
    103c:	5f 2e       	mov	r5, r31
    103e:	f0 2d       	mov	r31, r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <led2_lightred>:
void led2_lightred() 	{ led2ColorIndex = CLR_LRED; 	}
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	0f 2e       	mov	r0, r31
    1050:	fa e0       	ldi	r31, 0x0A	; 10
    1052:	7f 2e       	mov	r7, r31
    1054:	f0 2d       	mov	r31, r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <led1_green>:

void led1_green() 		{ led1ColorIndex = CLR_GREEN; 	} 	
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	55 24       	eor	r5, r5
    1066:	68 94       	set
    1068:	52 f8       	bld	r5, 2
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <led2_green>:
void led2_green() 		{ led2ColorIndex = CLR_GREEN; 	} 	
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	77 24       	eor	r7, r7
    107a:	68 94       	set
    107c:	72 f8       	bld	r7, 2
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <led1_lightgreen>:
void led1_lightgreen() 	{ led1ColorIndex = CLR_LGREEN; }
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	0f 2e       	mov	r0, r31
    108e:	f5 e0       	ldi	r31, 0x05	; 5
    1090:	5f 2e       	mov	r5, r31
    1092:	f0 2d       	mov	r31, r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <led2_lightgreen>:
void led2_lightgreen() 	{ led2ColorIndex = CLR_LGREEN; }
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	0f 2e       	mov	r0, r31
    10a4:	f5 e0       	ldi	r31, 0x05	; 5
    10a6:	7f 2e       	mov	r7, r31
    10a8:	f0 2d       	mov	r31, r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <led1_blue>:

void led1_blue() 		{ led1ColorIndex = CLR_BLUE; 	} 	
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	55 24       	eor	r5, r5
    10ba:	68 94       	set
    10bc:	53 f8       	bld	r5, 3
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <led2_blue>:
void led2_blue() 		{ led2ColorIndex = CLR_BLUE; 	} 	
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	77 24       	eor	r7, r7
    10ce:	68 94       	set
    10d0:	73 f8       	bld	r7, 3
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <led1_lightblue>:
void led1_lightblue() 	{ led1ColorIndex = CLR_LBLUE; 	}
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	0f 2e       	mov	r0, r31
    10e2:	f6 e0       	ldi	r31, 0x06	; 6
    10e4:	5f 2e       	mov	r5, r31
    10e6:	f0 2d       	mov	r31, r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <led2_lightblue>:
void led2_lightblue() 	{ led2ColorIndex = CLR_LBLUE; 	}
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	0f 2e       	mov	r0, r31
    10f8:	f6 e0       	ldi	r31, 0x06	; 6
    10fa:	7f 2e       	mov	r7, r31
    10fc:	f0 2d       	mov	r31, r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <led1_yellow>:

void led1_yellow() 		{ led1ColorIndex = CLR_YELLOW; } 	
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	55 24       	eor	r5, r5
    110e:	68 94       	set
    1110:	51 f8       	bld	r5, 1
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <led2_yellow>:
void led2_yellow() 		{ led2ColorIndex = CLR_YELLOW; } 	
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	77 24       	eor	r7, r7
    1122:	68 94       	set
    1124:	71 f8       	bld	r7, 1
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <led1_lightyellow>:
void led1_lightyellow() { led1ColorIndex = CLR_LYELLOW; }
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	0f 2e       	mov	r0, r31
    1136:	f3 e0       	ldi	r31, 0x03	; 3
    1138:	5f 2e       	mov	r5, r31
    113a:	f0 2d       	mov	r31, r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <led2_lightyellow>:
void led2_lightyellow() { led2ColorIndex = CLR_LYELLOW; }
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	0f 2e       	mov	r0, r31
    114c:	f3 e0       	ldi	r31, 0x03	; 3
    114e:	7f 2e       	mov	r7, r31
    1150:	f0 2d       	mov	r31, r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <led1_rose>:

void led1_rose() 		{ led1ColorIndex = CLR_ROSE; 	} 	
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	0f 2e       	mov	r0, r31
    1162:	f9 e0       	ldi	r31, 0x09	; 9
    1164:	5f 2e       	mov	r5, r31
    1166:	f0 2d       	mov	r31, r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <led2_rose>:
void led2_rose() 		{ led2ColorIndex = CLR_ROSE; 	} 	
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	0f 2e       	mov	r0, r31
    1178:	f9 e0       	ldi	r31, 0x09	; 9
    117a:	7f 2e       	mov	r7, r31
    117c:	f0 2d       	mov	r31, r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <led1_white>:
void led1_white() 		{ led1ColorIndex = CLR_WHITE; 	}
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	0f 2e       	mov	r0, r31
    118e:	f7 e0       	ldi	r31, 0x07	; 7
    1190:	5f 2e       	mov	r5, r31
    1192:	f0 2d       	mov	r31, r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <led2_white>:
void led2_white() 		{ led2ColorIndex = CLR_WHITE; 	}
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	0f 2e       	mov	r0, r31
    11a4:	f7 e0       	ldi	r31, 0x07	; 7
    11a6:	7f 2e       	mov	r7, r31
    11a8:	f0 2d       	mov	r31, r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <stateInitialize>:
 * - Startzustand setzen
 * - Zustandstabelle laden
 *
 ***************************************************************************/
void stateInitialize(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	//Startzustand
	state = STARTUP;
    11b8:	0f 2e       	mov	r0, r31
    11ba:	fa e0       	ldi	r31, 0x0A	; 10
    11bc:	2f 2e       	mov	r2, r31
    11be:	f0 2d       	mov	r31, r0
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <stateNextState>:

//Folgezustand der Controller-Statemachine
void stateNextState(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	2b 97       	sbiw	r28, 0x0b	; 11
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
	//Für schnelleren Zugriff, Werte in lokalen Variablen sichern...
	uint8_t fState 		= state;
    11da:	28 86       	std	Y+8, r2	; 0x08
	uint8_t fDimLevel 	= dimLevel;
    11dc:	80 91 d9 00 	lds	r24, 0x00D9
    11e0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t fBtnCode 	= btnCode;
    11e2:	80 91 d6 00 	lds	r24, 0x00D6
    11e6:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t waitSecs 	= time.waitSecs;
    11e8:	80 91 f9 00 	lds	r24, 0x00F9
    11ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t waitMins 	= time.waitMins;
    11ee:	80 91 fa 00 	lds	r24, 0x00FA
    11f2:	8b 83       	std	Y+3, r24	; 0x03

	//Folgezustand
	uint8_t nextState 	= fState;
    11f4:	88 85       	ldd	r24, Y+8	; 0x08
    11f6:	8c 83       	std	Y+4, r24	; 0x04


	//Variablen für die Programmierung
	#ifdef PROGRAMMING_ENABLED
		uint8_t fProgSelect = progSelect;
    11f8:	80 91 da 00 	lds	r24, 0x00DA
    11fc:	8d 83       	std	Y+5, r24	; 0x05
		uint8_t fProgOutputIndex = progOutputIndex;
    11fe:	80 91 db 00 	lds	r24, 0x00DB
    1202:	8e 83       	std	Y+6, r24	; 0x06
		uint8_t fProgOutputDimLevel = progOutputDimLevel;
    1204:	80 91 dc 00 	lds	r24, 0x00DC
    1208:	8f 83       	std	Y+7, r24	; 0x07
		uint8_t fProgPwm1Soll 	= pwmOutput.pwm1Soll;
    120a:	80 91 f0 00 	lds	r24, 0x00F0
    120e:	89 87       	std	Y+9, r24	; 0x09
		uint8_t fProgPwm2Soll 	= pwmOutput.pwm2Soll;
    1210:	80 91 f2 00 	lds	r24, 0x00F2
    1214:	8a 87       	std	Y+10, r24	; 0x0a
	#endif

	
	switch (fState) {
    1216:	88 85       	ldd	r24, Y+8	; 0x08
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	88 36       	cpi	r24, 0x68	; 104
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <stateNextState+0x5e>
    1222:	17 c1       	rjmp	.+558    	; 0x1452 <stateNextState+0x28c>
    1224:	89 36       	cpi	r24, 0x69	; 105
    1226:	91 05       	cpc	r25, r1
    1228:	44 f5       	brge	.+80     	; 0x127a <stateNextState+0xb4>
    122a:	8f 31       	cpi	r24, 0x1F	; 31
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <stateNextState+0x6c>
    1230:	a5 c0       	rjmp	.+330    	; 0x137c <stateNextState+0x1b6>
    1232:	80 32       	cpi	r24, 0x20	; 32
    1234:	91 05       	cpc	r25, r1
    1236:	64 f4       	brge	.+24     	; 0x1250 <stateNextState+0x8a>
    1238:	84 31       	cpi	r24, 0x14	; 20
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <stateNextState+0x7a>
    123e:	79 c0       	rjmp	.+242    	; 0x1332 <stateNextState+0x16c>
    1240:	8e 31       	cpi	r24, 0x1E	; 30
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <stateNextState+0x82>
    1246:	87 c0       	rjmp	.+270    	; 0x1356 <stateNextState+0x190>
    1248:	8a 30       	cpi	r24, 0x0A	; 10
    124a:	91 05       	cpc	r25, r1
    124c:	d9 f1       	breq	.+118    	; 0x12c4 <stateNextState+0xfe>
    124e:	9f c2       	rjmp	.+1342   	; 0x178e <stateNextState+0x5c8>
    1250:	82 33       	cpi	r24, 0x32	; 50
    1252:	91 05       	cpc	r25, r1
    1254:	09 f4       	brne	.+2      	; 0x1258 <stateNextState+0x92>
    1256:	b9 c0       	rjmp	.+370    	; 0x13ca <stateNextState+0x204>
    1258:	83 33       	cpi	r24, 0x33	; 51
    125a:	91 05       	cpc	r25, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <stateNextState+0xa2>
    125e:	88 32       	cpi	r24, 0x28	; 40
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <stateNextState+0xa0>
    1264:	ad c0       	rjmp	.+346    	; 0x13c0 <stateNextState+0x1fa>
    1266:	93 c2       	rjmp	.+1318   	; 0x178e <stateNextState+0x5c8>
    1268:	83 33       	cpi	r24, 0x33	; 51
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <stateNextState+0xaa>
    126e:	c9 c0       	rjmp	.+402    	; 0x1402 <stateNextState+0x23c>
    1270:	84 36       	cpi	r24, 0x64	; 100
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <stateNextState+0xb2>
    1276:	db c0       	rjmp	.+438    	; 0x142e <stateNextState+0x268>
    1278:	8a c2       	rjmp	.+1300   	; 0x178e <stateNextState+0x5c8>
    127a:	88 3c       	cpi	r24, 0xC8	; 200
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <stateNextState+0xbc>
    1280:	fd c1       	rjmp	.+1018   	; 0x167c <stateNextState+0x4b6>
    1282:	89 3c       	cpi	r24, 0xC9	; 201
    1284:	91 05       	cpc	r25, r1
    1286:	6c f4       	brge	.+26     	; 0x12a2 <stateNextState+0xdc>
    1288:	83 38       	cpi	r24, 0x83	; 131
    128a:	91 05       	cpc	r25, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <stateNextState+0xca>
    128e:	94 c1       	rjmp	.+808    	; 0x15b8 <stateNextState+0x3f2>
    1290:	8c 38       	cpi	r24, 0x8C	; 140
    1292:	91 05       	cpc	r25, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <stateNextState+0xd2>
    1296:	3c c2       	rjmp	.+1144   	; 0x1710 <stateNextState+0x54a>
    1298:	82 38       	cpi	r24, 0x82	; 130
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <stateNextState+0xda>
    129e:	86 c1       	rjmp	.+780    	; 0x15ac <stateNextState+0x3e6>
    12a0:	76 c2       	rjmp	.+1260   	; 0x178e <stateNextState+0x5c8>
    12a2:	8a 3c       	cpi	r24, 0xCA	; 202
    12a4:	91 05       	cpc	r25, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <stateNextState+0xe4>
    12a8:	16 c2       	rjmp	.+1068   	; 0x16d6 <stateNextState+0x510>
    12aa:	8a 3c       	cpi	r24, 0xCA	; 202
    12ac:	91 05       	cpc	r25, r1
    12ae:	0c f4       	brge	.+2      	; 0x12b2 <stateNextState+0xec>
    12b0:	f5 c1       	rjmp	.+1002   	; 0x169c <stateNextState+0x4d6>
    12b2:	8e 3f       	cpi	r24, 0xFE	; 254
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <stateNextState+0xf4>
    12b8:	52 c2       	rjmp	.+1188   	; 0x175e <stateNextState+0x598>
    12ba:	8f 3f       	cpi	r24, 0xFF	; 255
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <stateNextState+0xfc>
    12c0:	5c c2       	rjmp	.+1208   	; 0x177a <stateNextState+0x5b4>
    12c2:	65 c2       	rjmp	.+1226   	; 0x178e <stateNextState+0x5c8>

		//Controller starten
		case STARTUP: {
			if (!eepromIsProgrammed()) 
    12c4:	dc da       	rcall	.-2632   	; 0x87e <eepromIsProgrammed>
    12c6:	88 23       	and	r24, r24
    12c8:	19 f4       	brne	.+6      	; 0x12d0 <stateNextState+0x10a>
			{
				//Fehler, wenn EEPROM nicht programmiert ist...
				nextState = ERROR;
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	8c 83       	std	Y+4, r24	; 0x04
				break;
    12ce:	7d c2       	rjmp	.+1274   	; 0x17ca <stateNextState+0x604>
			//Ist beim Start eine Taste gedrückt ist, werden die Daten im EEPROM
			//mit den Defaultwerten überschrieben
			//ansonsten werden die Daten aus dem EEPROM geladen
			
			#ifdef PROGRAMMING_ENABLED
				if (bit_is_clear(BUTTON1_PINR, BUTTON1_PIN)) 
    12d0:	89 e3       	ldi	r24, 0x39	; 57
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	fc 01       	movw	r30, r24
    12d6:	80 81       	ld	r24, Z
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	80 71       	andi	r24, 0x10	; 16
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	91 f4       	brne	.+36     	; 0x1308 <stateNextState+0x142>
				{
					//Warten bis Taster losgelassen wird...
					loop_until_bit_is_set(BUTTON1_PINR, BUTTON1_PIN);
    12e4:	89 e3       	ldi	r24, 0x39	; 57
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	80 71       	andi	r24, 0x10	; 16
    12f2:	90 70       	andi	r25, 0x00	; 0
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	b1 f3       	breq	.-20     	; 0x12e4 <stateNextState+0x11e>
				
					//Eventuelle Kalibrierung abbrechen
					#ifdef CALIBRATION_ENABLED
						calibResetFlag();
    12f8:	ee d8       	rcall	.-3620   	; 0x4d6 <calibResetFlag>
					#endif

					eepromSetActiveFlag(0);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	e1 da       	rcall	.-2622   	; 0x8c0 <eepromSetActiveFlag>

					waitSecs = 5;
    12fe:	85 e0       	ldi	r24, 0x05	; 5
    1300:	8a 83       	std	Y+2, r24	; 0x02
					nextState = SHOW_VERSION;
    1302:	8e ef       	ldi	r24, 0xFE	; 254
    1304:	8c 83       	std	Y+4, r24	; 0x04
					break;
    1306:	61 c2       	rjmp	.+1218   	; 0x17ca <stateNextState+0x604>
				} 
				else 
				{ 
					#ifdef CALIBRATION_ENABLED
						calibInitialize();
    1308:	f1 d8       	rcall	.-3614   	; 0x4ec <calibInitialize>
					#endif

					eepromLoadData();
    130a:	c8 da       	rcall	.-2672   	; 0x89c <eepromLoadData>
					pwmEnable();
    130c:	0f db       	rcall	.-2530   	; 0x92c <pwmEnable>
				}
			#endif

			//Check ob die Lampe in aktiven Zustand von der Versorgungsspannung
			//getrennt wurde
			fDimLevel = eepromGetActiveFlag();
    130e:	e6 da       	rcall	.-2612   	; 0x8dc <eepromGetActiveFlag>
    1310:	89 83       	std	Y+1, r24	; 0x01
			if (fDimLevel != 0) {
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	88 23       	and	r24, r24
    1316:	41 f0       	breq	.+16     	; 0x1328 <stateNextState+0x162>
				fDimLevel = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
				//IDLE wird übersprungen, also müssen einige Variablen gesetzt werden
				accuDisplayEnabled = 1;	//Akku-Status anzeigen
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	80 93 d4 00 	sts	0x00D4, r24
				nextState = ACTIVE;
    1322:	82 e3       	ldi	r24, 0x32	; 50
    1324:	8c 83       	std	Y+4, r24	; 0x04
				sendVoltTable();
				sendCalibTable();
				sendControllerState();
			#endif
			
			break;
    1326:	51 c2       	rjmp	.+1186   	; 0x17ca <stateNextState+0x604>
				fDimLevel = 1;
				//IDLE wird übersprungen, also müssen einige Variablen gesetzt werden
				accuDisplayEnabled = 1;	//Akku-Status anzeigen
				nextState = ACTIVE;
			} else {
				waitSecs = 2;
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	8a 83       	std	Y+2, r24	; 0x02
				nextState = LEDCHECK; 
    132c:	84 e1       	ldi	r24, 0x14	; 20
    132e:	8c 83       	std	Y+4, r24	; 0x04
				sendVoltTable();
				sendCalibTable();
				sendControllerState();
			#endif
			
			break;
    1330:	4c c2       	rjmp	.+1176   	; 0x17ca <stateNextState+0x604>

		//Beide Leds für 2 Sekunden aktivieren, danach in IDLE
		//************************************************************************************************************** 
		case LEDCHECK: {
			
			led1Mode = LED_ON; 	led1_white();	
    1332:	44 24       	eor	r4, r4
    1334:	43 94       	inc	r4
    1336:	26 df       	rcall	.-436    	; 0x1184 <led1_white>
			led2Mode = LED_ON;  led2_white();
    1338:	66 24       	eor	r6, r6
    133a:	63 94       	inc	r6
    133c:	2e df       	rcall	.-420    	; 0x119a <led2_white>


			if (!waitSecs) { nextState = IDLE; };
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	88 23       	and	r24, r24
    1342:	11 f4       	brne	.+4      	; 0x1348 <stateNextState+0x182>
    1344:	8e e1       	ldi	r24, 0x1E	; 30
    1346:	8c 83       	std	Y+4, r24	; 0x04
			if ( fBtnCode) { nextState = IDLE; };
    1348:	8b 85       	ldd	r24, Y+11	; 0x0b
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <stateNextState+0x18a>
    134e:	22 c2       	rjmp	.+1092   	; 0x1794 <stateNextState+0x5ce>
    1350:	8e e1       	ldi	r24, 0x1E	; 30
    1352:	8c 83       	std	Y+4, r24	; 0x04
			break;
    1354:	3a c2       	rjmp	.+1140   	; 0x17ca <stateNextState+0x604>
		//************************************************************************************************************** 
		case IDLE: {
			#ifdef DEBUG 
				sendControllerState(); 
			#endif
			accuDisplayEnabled = 1;	//Akku-Status anzeigen
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	80 93 d4 00 	sts	0x00D4, r24
			accuRefreshDisplay();
    135c:	d1 d6       	rcall	.+3490   	; 0x2100 <__data_load_end+0x3b8>
			led1Mode = LED_OFF; 	//Status-LED aus						
    135e:	44 24       	eor	r4, r4
			fDimLevel = 0; 
    1360:	19 82       	std	Y+1, r1	; 0x01
			eepromSetActiveFlag(0);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	ad da       	rcall	.-2726   	; 0x8c0 <eepromSetActiveFlag>

			pwmEnable();				//-> Einstellungen für PWM setzen, wichtig für Invertierung
    1366:	e2 da       	rcall	.-2620   	; 0x92c <pwmEnable>
			pwmDisable();				//-> PWM-Ausgänge aus, PWM-Hardware läuft aber weiter...
    1368:	1d db       	rcall	.-2502   	; 0x9a4 <pwmDisable>
			waitMins = WAIT_MINS_TO_SLEEP;//Sleep-Timer setzen
    136a:	85 e0       	ldi	r24, 0x05	; 5
    136c:	8b 83       	std	Y+3, r24	; 0x03
			
			//In IDLE_WAIT gehts erst, wenn der Taster losgelassen ist
			if (0 == fBtnCode) {
    136e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1370:	88 23       	and	r24, r24
    1372:	09 f0       	breq	.+2      	; 0x1376 <stateNextState+0x1b0>
    1374:	11 c2       	rjmp	.+1058   	; 0x1798 <stateNextState+0x5d2>
				nextState = IDLE_WAIT;
    1376:	8f e1       	ldi	r24, 0x1F	; 31
    1378:	8c 83       	std	Y+4, r24	; 0x04
			}
			break;
    137a:	27 c2       	rjmp	.+1102   	; 0x17ca <stateNextState+0x604>
		
		//Auf Tasterereignisse warten und reagieren...
		//Ablauf des Timers abwarten -> Sleep-Mode
		case IDLE_WAIT: {
			#ifdef SLEEP_ENABLED
			if (!waitMins) nextState = SLEEP;
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 23       	and	r24, r24
    1380:	11 f4       	brne	.+4      	; 0x1386 <stateNextState+0x1c0>
    1382:	88 e2       	ldi	r24, 0x28	; 40
    1384:	8c 83       	std	Y+4, r24	; 0x04
			#endif

			#ifdef V2_DUO
			if (fBtnCode & ((1<<BTN1RELEASED) | (1 << BTN2RELEASED)))
			#else
			if (bit_is_set(fBtnCode, BTN1RELEASED))
    1386:	ce 01       	movw	r24, r28
    1388:	0b 96       	adiw	r24, 0x0b	; 11
    138a:	fc 01       	movw	r30, r24
    138c:	80 81       	ld	r24, Z
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	88 70       	andi	r24, 0x08	; 8
    1394:	90 70       	andi	r25, 0x00	; 0
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	09 f4       	brne	.+2      	; 0x139c <stateNextState+0x1d6>
    139a:	00 c2       	rjmp	.+1024   	; 0x179c <stateNextState+0x5d6>
			#endif
			{ 
				//Wird der Taster lange gedrückt und weiter gehalten, gehts in den Programmiermodus
//				if (bit_is_set(fBtnCode, BTN1LONGPRESSED) && bit_is_set(fBtnCode, BTN1PRESSING)) {
				if (fBtnCode & ((1 << BTN1LONGPRESSED) | (1 << BTN1PRESSING))) {
    139c:	8b 85       	ldd	r24, Y+11	; 0x0b
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	86 70       	andi	r24, 0x06	; 6
    13a4:	90 70       	andi	r25, 0x00	; 0
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	19 f0       	breq	.+6      	; 0x13b0 <stateNextState+0x1ea>
					#ifdef PROGRAMMING_ENABLED
					nextState = PROG_BEGIN;
    13aa:	84 e6       	ldi	r24, 0x64	; 100
    13ac:	8c 83       	std	Y+4, r24	; 0x04
					fDimLevel = transTableGetNextDimLevel(fDimLevel, fBtnCode);
					nextState = ACTIVE;
				}
			}
			
			break;
    13ae:	0d c2       	rjmp	.+1050   	; 0x17ca <stateNextState+0x604>
					#ifdef PROGRAMMING_ENABLED
					nextState = PROG_BEGIN;
					#endif
				} else {
					//Ansonsten wird die Lampe aktiviert
					fDimLevel = transTableGetNextDimLevel(fDimLevel, fBtnCode);
    13b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	69 2f       	mov	r22, r25
    13b6:	27 d2       	rcall	.+1102   	; 0x1806 <transTableGetNextDimLevel>
    13b8:	89 83       	std	Y+1, r24	; 0x01
					nextState = ACTIVE;
    13ba:	82 e3       	ldi	r24, 0x32	; 50
    13bc:	8c 83       	std	Y+4, r24	; 0x04
				}
			}
			
			break;
    13be:	05 c2       	rjmp	.+1034   	; 0x17ca <stateNextState+0x604>
		#ifdef SLEEP_ENABLED	
		//Schlafzustand betreten
		//Beide Leds langsam pulsieren lassen, dann warten bis was passiert
		//************************************************************************************************************** 
		case SLEEP: {
			leds_off();
    13c0:	1b de       	rcall	.-970    	; 0xff8 <leds_off>

			doSleep();
    13c2:	42 d9       	rcall	.-3452   	; 0x648 <doSleep>
			
			
			//... Aufwecken durch Interruptroutine, Code wird fortgesetzt
			nextState = IDLE;
    13c4:	8e e1       	ldi	r24, 0x1E	; 30
    13c6:	8c 83       	std	Y+4, r24	; 0x04

			break;
    13c8:	00 c2       	rjmp	.+1024   	; 0x17ca <stateNextState+0x604>
		case ACTIVE: {
			#ifdef DEBUG
				sendControllerState();
			#endif
			
			if (!dimLevel) { nextState = IDLE; break; }
    13ca:	80 91 d9 00 	lds	r24, 0x00D9
    13ce:	88 23       	and	r24, r24
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <stateNextState+0x212>
    13d2:	8e e1       	ldi	r24, 0x1E	; 30
    13d4:	8c 83       	std	Y+4, r24	; 0x04
    13d6:	f9 c1       	rjmp	.+1010   	; 0x17ca <stateNextState+0x604>
			eepromSetActiveFlag(fDimLevel);
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	72 da       	rcall	.-2844   	; 0x8c0 <eepromSetActiveFlag>
			
			led1Mode = LED_ON;
    13dc:	44 24       	eor	r4, r4
    13de:	43 94       	inc	r4
			led1ColorIndex = ledDimColors[fDimLevel];
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	8c 55       	subi	r24, 0x5C	; 92
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	fc 01       	movw	r30, r24
    13ec:	80 81       	ld	r24, Z
    13ee:	58 2e       	mov	r5, r24
			
			pwmTableSetOutPut(dimLevel);
    13f0:	80 91 d9 00 	lds	r24, 0x00D9
    13f4:	97 dc       	rcall	.-1746   	; 0xd24 <pwmTableSetOutPut>
			
			//PWM an
			pwmEnable();
    13f6:	9a da       	rcall	.-2764   	; 0x92c <pwmEnable>

			nextState = ACTIVE_WAIT;
    13f8:	83 e3       	ldi	r24, 0x33	; 51
    13fa:	8c 83       	std	Y+4, r24	; 0x04
			waitSecs = 6;
    13fc:	86 e0       	ldi	r24, 0x06	; 6
    13fe:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1400:	e4 c1       	rjmp	.+968    	; 0x17ca <stateNextState+0x604>
		} //ACTIVE
		
		
		//Auf Tastendruck warten und reagieren
		case ACTIVE_WAIT: {
			if (1 == waitSecs) { ledsDimDown = 1; }
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	11 f4       	brne	.+4      	; 0x140c <stateNextState+0x246>
    1408:	88 24       	eor	r8, r8
    140a:	83 94       	inc	r8

			#ifdef V2_DUO
			if (fBtnCode & ((1<<BTN1RELEASED) | (1 << BTN2RELEASED)))
			#else
			if (fBtnCode & (1<<BTN1RELEASED))
    140c:	8b 85       	ldd	r24, Y+11	; 0x0b
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 70       	andi	r24, 0x08	; 8
    1414:	90 70       	andi	r25, 0x00	; 0
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	09 f4       	brne	.+2      	; 0x141c <stateNextState+0x256>
    141a:	c2 c1       	rjmp	.+900    	; 0x17a0 <stateNextState+0x5da>
			#endif
			{ 
				fDimLevel = transTableGetNextDimLevel(fDimLevel, fBtnCode);
    141c:	9b 85       	ldd	r25, Y+11	; 0x0b
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	69 2f       	mov	r22, r25
    1422:	f1 d1       	rcall	.+994    	; 0x1806 <transTableGetNextDimLevel>
    1424:	89 83       	std	Y+1, r24	; 0x01
				ledsDimDown = 0;
    1426:	88 24       	eor	r8, r8
				nextState = ACTIVE;
    1428:	82 e3       	ldi	r24, 0x32	; 50
    142a:	8c 83       	std	Y+4, r24	; 0x04
			}
			break;
    142c:	ce c1       	rjmp	.+924    	; 0x17ca <stateNextState+0x604>
				Im Anschluss startet die Auswahl des Programmiermodus
				Wird der Taster innerhalb der 5 Sekunden losgelassen, wird zu IDLE zurückgegangen
		*/
		case PROG_BEGIN: {
			//Akku-Status-Anzeige Aus
			accuDisplayEnabled = 0;
    142e:	10 92 d4 00 	sts	0x00D4, r1
			ledsDimDown = 0; 
    1432:	88 24       	eor	r8, r8

			//Beide LEDs Blau
			led1Mode = LED_BLINK;	led1_blue();
    1434:	44 24       	eor	r4, r4
    1436:	68 94       	set
    1438:	41 f8       	bld	r4, 1
    143a:	3a de       	rcall	.-908    	; 0x10b0 <led1_blue>
			led2Mode = LED_BLINK;	led2_blue();
    143c:	66 24       	eor	r6, r6
    143e:	68 94       	set
    1440:	61 f8       	bld	r6, 1
    1442:	40 de       	rcall	.-896    	; 0x10c4 <led2_blue>

			//PWM an - Aber Ausgänge auf 0
			pwmDisable();
    1444:	af da       	rcall	.-2722   	; 0x9a4 <pwmDisable>

			fProgSelect = 0;
    1446:	1d 82       	std	Y+5, r1	; 0x05
			
			waitSecs = 10;
    1448:	8a e0       	ldi	r24, 0x0A	; 10
    144a:	8a 83       	std	Y+2, r24	; 0x02
			nextState = PROG_SELECT;
    144c:	88 e6       	ldi	r24, 0x68	; 104
    144e:	8c 83       	std	Y+4, r24	; 0x04
			break;
    1450:	bc c1       	rjmp	.+888    	; 0x17ca <stateNextState+0x604>
		
		/************************************************************************************************************** 
			Auswahl der Einstellung, die verändert werden soll
		*/
		case PROG_SELECT : {
			if (waitSecs) {
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	88 23       	and	r24, r24
    1456:	91 f0       	breq	.+36     	; 0x147c <stateNextState+0x2b6>
				if ((bit_is_clear(fBtnCode, BTN1PRESSING)) && (fProgSelect == 0))
    1458:	ce 01       	movw	r24, r28
    145a:	0b 96       	adiw	r24, 0x0b	; 11
    145c:	fc 01       	movw	r30, r24
    145e:	80 81       	ld	r24, Z
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	84 70       	andi	r24, 0x04	; 4
    1466:	90 70       	andi	r25, 0x00	; 0
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	09 f0       	breq	.+2      	; 0x146e <stateNextState+0x2a8>
    146c:	9b c1       	rjmp	.+822    	; 0x17a4 <stateNextState+0x5de>
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	88 23       	and	r24, r24
    1472:	09 f0       	breq	.+2      	; 0x1476 <stateNextState+0x2b0>
    1474:	99 c1       	rjmp	.+818    	; 0x17a8 <stateNextState+0x5e2>
					nextState = STARTUP;
    1476:	8a e0       	ldi	r24, 0x0A	; 10
    1478:	8c 83       	std	Y+4, r24	; 0x04
				break;
    147a:	a7 c1       	rjmp	.+846    	; 0x17ca <stateNextState+0x604>
			}

			//Taster wird weiter gehalten...
			if (bit_is_set(fBtnCode, BTN1RELEASED)) {
    147c:	ce 01       	movw	r24, r28
    147e:	0b 96       	adiw	r24, 0x0b	; 11
    1480:	fc 01       	movw	r30, r24
    1482:	80 81       	ld	r24, Z
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	88 70       	andi	r24, 0x08	; 8
    148a:	90 70       	andi	r25, 0x00	; 0
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	69 f1       	breq	.+90     	; 0x14ea <stateNextState+0x324>
					#ifdef PROG_PWM_CS_ENABLED
						// Maximum ProgSelect11 = PWM-Frequenz-Einstellung (wenn aktiv)
						if (fProgSelect++ == 11) { fProgSelect = 1; }
					#else
						// Maximum ProgSelect10 = Einstellungen zurücksetzen
						if (fProgSelect++ == 10) { fProgSelect = 1; }
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	9a 30       	cpi	r25, 0x0A	; 10
    1496:	09 f0       	breq	.+2      	; 0x149a <stateNextState+0x2d4>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	9f 5f       	subi	r25, 0xFF	; 255
    149e:	9d 83       	std	Y+5, r25	; 0x05
    14a0:	88 23       	and	r24, r24
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <stateNextState+0x2e2>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	8d 83       	std	Y+5, r24	; 0x05
					#endif
					
				
					//Ist der 2. Lampenausgang deaktiviert, werden die Einstellungen dafür übersprungen
					// ProgSelect5 = ModeSelect Ausgang 2
					if ((fProgSelect == 5) && (!pwm2Enabled)) {
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	85 30       	cpi	r24, 0x05	; 5
    14ac:	31 f4       	brne	.+12     	; 0x14ba <stateNextState+0x2f4>
    14ae:	80 91 d8 00 	lds	r24, 0x00D8
    14b2:	88 23       	and	r24, r24
    14b4:	11 f4       	brne	.+4      	; 0x14ba <stateNextState+0x2f4>
						// Springe zu ProgSelect9 = Calibration
						fProgSelect = 9; 
    14b6:	89 e0       	ldi	r24, 0x09	; 9
    14b8:	8d 83       	std	Y+5, r24	; 0x05
					}

					// Optionen für die Modus-Einstellung deaktivieren
					#ifndef PROG_OUTPUT_MODE_SELECT_ENABLED
						// ProgSelect1 = ModeSelect Ausgang 1 - überspringen
						if (fProgSelect == 1) { fProgSelect++; }	
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	19 f4       	brne	.+6      	; 0x14c6 <stateNextState+0x300>
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	8d 83       	std	Y+5, r24	; 0x05
						// ProgSelect5 = ModeSelect Ausgang 2 - überspringen
						if (fProgSelect == 5) { fProgSelect++; }	
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	85 30       	cpi	r24, 0x05	; 5
    14ca:	19 f4       	brne	.+6      	; 0x14d2 <stateNextState+0x30c>
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	8d 83       	std	Y+5, r24	; 0x05
					#endif
					
					// 2 Sekunden Interval für Inkrementierung von ProgSelect
					if (bit_is_set(fBtnCode, BTN1PRESSING))
    14d2:	ce 01       	movw	r24, r28
    14d4:	0b 96       	adiw	r24, 0x0b	; 11
    14d6:	fc 01       	movw	r30, r24
    14d8:	80 81       	ld	r24, Z
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	84 70       	andi	r24, 0x04	; 4
    14e0:	90 70       	andi	r25, 0x00	; 0
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	11 f0       	breq	.+4      	; 0x14ea <stateNextState+0x324>
						waitSecs = 2;
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	8a 83       	std	Y+2, r24	; 0x02
			}



			//Index für den zu programmierenden Ausgang
			if (fProgSelect > 0) {
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	88 23       	and	r24, r24
    14ee:	71 f1       	breq	.+92     	; 0x154c <stateNextState+0x386>
				leds_off();
    14f0:	83 dd       	rcall	.-1274   	; 0xff8 <leds_off>
				led1Mode = LED_BLINK;
    14f2:	44 24       	eor	r4, r4
    14f4:	68 94       	set
    14f6:	41 f8       	bld	r4, 1
				led2Mode = LED_BLINK;
    14f8:	66 24       	eor	r6, r6
    14fa:	68 94       	set
    14fc:	61 f8       	bld	r6, 1

				if ((fProgSelect >= 1) && (fProgSelect <= 4)) {
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	88 23       	and	r24, r24
    1502:	39 f0       	breq	.+14     	; 0x1512 <stateNextState+0x34c>
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	85 30       	cpi	r24, 0x05	; 5
    1508:	20 f4       	brcc	.+8      	; 0x1512 <stateNextState+0x34c>
					fProgOutputDimLevel = fProgSelect - 1;
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	81 50       	subi	r24, 0x01	; 1
    150e:	8f 83       	std	Y+7, r24	; 0x07
					fProgOutputIndex = 0;
    1510:	1e 82       	std	Y+6, r1	; 0x06
				}

				if ((fProgSelect >= 5) && (fProgSelect <= 8)) {
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	85 30       	cpi	r24, 0x05	; 5
    1516:	40 f0       	brcs	.+16     	; 0x1528 <stateNextState+0x362>
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	89 30       	cpi	r24, 0x09	; 9
    151c:	28 f4       	brcc	.+10     	; 0x1528 <stateNextState+0x362>
					fProgOutputDimLevel = fProgSelect - 5;
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	85 50       	subi	r24, 0x05	; 5
    1522:	8f 83       	std	Y+7, r24	; 0x07
					fProgOutputIndex = 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	8e 83       	std	Y+6, r24	; 0x06
				}

				led1ColorIndex = ledProgColors1[fProgSelect-1];
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	88 55       	subi	r24, 0x58	; 88
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	fc 01       	movw	r30, r24
    1536:	80 81       	ld	r24, Z
    1538:	58 2e       	mov	r5, r24
				led2ColorIndex = ledProgColors2[fProgSelect-1];
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	8d 54       	subi	r24, 0x4D	; 77
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	fc 01       	movw	r30, r24
    1548:	80 81       	ld	r24, Z
    154a:	78 2e       	mov	r7, r24
			}
		

			//Taster losgelassen
			if (bit_is_clear(fBtnCode, BTN1PRESSING)) 
    154c:	ce 01       	movw	r24, r28
    154e:	0b 96       	adiw	r24, 0x0b	; 11
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	84 70       	andi	r24, 0x04	; 4
    155a:	90 70       	andi	r25, 0x00	; 0
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	09 f0       	breq	.+2      	; 0x1562 <stateNextState+0x39c>
    1560:	25 c1       	rjmp	.+586    	; 0x17ac <stateNextState+0x5e6>
			{
				if (9 == fProgSelect) {
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	89 30       	cpi	r24, 0x09	; 9
    1566:	19 f4       	brne	.+6      	; 0x156e <stateNextState+0x3a8>
					#ifdef CALIBRATION_ENABLED
						nextState = CALIB_START; 
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	8c 83       	std	Y+4, r24	; 0x04
					#else
						nextState = IDLE;
					#endif
					break; 
    156c:	2e c1       	rjmp	.+604    	; 0x17ca <stateNextState+0x604>
				}

				if (10 == fProgSelect) {
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	8a 30       	cpi	r24, 0x0A	; 10
    1572:	19 f4       	brne	.+6      	; 0x157a <stateNextState+0x3b4>
					nextState = RESET;
    1574:	8c e8       	ldi	r24, 0x8C	; 140
    1576:	8c 83       	std	Y+4, r24	; 0x04
					break;
    1578:	28 c1       	rjmp	.+592    	; 0x17ca <stateNextState+0x604>
				
				#ifdef PROG_OUTPUT_MODE_SELECT_ENABLED
					if (0 == fProgOutputDimLevel) { nextState = PROG_DIMABLE_SET; 		break; };
				#else
					// Dieser Fall sollte nie eintreten
					if (0 == fProgOutputDimLevel) { nextState = ERROR; 					break; };
    157a:	8f 81       	ldd	r24, Y+7	; 0x07
    157c:	88 23       	and	r24, r24
    157e:	19 f4       	brne	.+6      	; 0x1586 <stateNextState+0x3c0>
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	8c 83       	std	Y+4, r24	; 0x04
    1584:	22 c1       	rjmp	.+580    	; 0x17ca <stateNextState+0x604>
				#endif
				if (1 == fProgOutputDimLevel) { nextState = PROG_BRIGHTNESS_SET; 	break; };
    1586:	8f 81       	ldd	r24, Y+7	; 0x07
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	19 f4       	brne	.+6      	; 0x1592 <stateNextState+0x3cc>
    158c:	82 e8       	ldi	r24, 0x82	; 130
    158e:	8c 83       	std	Y+4, r24	; 0x04
    1590:	1c c1       	rjmp	.+568    	; 0x17ca <stateNextState+0x604>
				if (2 == fProgOutputDimLevel) { nextState = PROG_BRIGHTNESS_SET; 	break; };
    1592:	8f 81       	ldd	r24, Y+7	; 0x07
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	19 f4       	brne	.+6      	; 0x159e <stateNextState+0x3d8>
    1598:	82 e8       	ldi	r24, 0x82	; 130
    159a:	8c 83       	std	Y+4, r24	; 0x04
    159c:	16 c1       	rjmp	.+556    	; 0x17ca <stateNextState+0x604>
				if (3 == fProgOutputDimLevel) { nextState = PROG_BRIGHTNESS_SET;	break; };
    159e:	8f 81       	ldd	r24, Y+7	; 0x07
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <stateNextState+0x3e0>
    15a4:	05 c1       	rjmp	.+522    	; 0x17b0 <stateNextState+0x5ea>
    15a6:	82 e8       	ldi	r24, 0x82	; 130
    15a8:	8c 83       	std	Y+4, r24	; 0x04
    15aa:	0f c1       	rjmp	.+542    	; 0x17ca <stateNextState+0x604>
		//Taste2: Helligkeit Lampe2
		//Beide Tasten: Weiter... 
		//************************************************************************************************************** 
		case PROG_BRIGHTNESS_SET : {
			//Bisherige PWM-Werte holen und anlegen
			pwmTableSetOutPut(fProgOutputDimLevel);
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	ba db       	rcall	.-2188   	; 0xd24 <pwmTableSetOutPut>
			pwmEnable();
    15b0:	bd d9       	rcall	.-3206   	; 0x92c <pwmEnable>
			nextState = PROG_BRIGHTNESS_WAIT;
    15b2:	83 e8       	ldi	r24, 0x83	; 131
    15b4:	8c 83       	std	Y+4, r24	; 0x04
			break;
    15b6:	09 c1       	rjmp	.+530    	; 0x17ca <stateNextState+0x604>
		
		
		case PROG_BRIGHTNESS_WAIT : {
			//Statusled für die Helligkeitstufe ist bereits gesetzt
			//Anzeige für Aus, Max auf der jeweils nicht aktiven Led
			led1Mode = LED_ON;
    15b8:	44 24       	eor	r4, r4
    15ba:	43 94       	inc	r4
			led2Mode = LED_ON;
    15bc:	66 24       	eor	r6, r6
    15be:	63 94       	inc	r6

			fProgPwm1Soll = pwmOutput.pwm1Soll;
    15c0:	80 91 f0 00 	lds	r24, 0x00F0
    15c4:	89 87       	std	Y+9, r24	; 0x09
			fProgPwm2Soll = pwmOutput.pwm2Soll;
    15c6:	80 91 f2 00 	lds	r24, 0x00F2
    15ca:	8a 87       	std	Y+10, r24	; 0x0a


			if (0 == fProgOutputIndex) {
    15cc:	8e 81       	ldd	r24, Y+6	; 0x06
    15ce:	88 23       	and	r24, r24
    15d0:	89 f4       	brne	.+34     	; 0x15f4 <stateNextState+0x42e>
				if (fProgPwm1Soll > (0xff-8)) 	{ led2_white();  	} else
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	88 3f       	cpi	r24, 0xF8	; 248
    15d6:	10 f0       	brcs	.+4      	; 0x15dc <stateNextState+0x416>
    15d8:	e0 dd       	rcall	.-1088   	; 0x119a <led2_white>
    15da:	1c c0       	rjmp	.+56     	; 0x1614 <stateNextState+0x44e>
				if (fProgPwm1Soll > 100) 	 	{ led2_green(); 	} else
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	85 36       	cpi	r24, 0x65	; 101
    15e0:	10 f0       	brcs	.+4      	; 0x15e6 <stateNextState+0x420>
    15e2:	46 dd       	rcall	.-1396   	; 0x1070 <led2_green>
    15e4:	17 c0       	rjmp	.+46     	; 0x1614 <stateNextState+0x44e>
				if (fProgPwm1Soll > 0)        	{ led2_yellow();    } else
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	88 23       	and	r24, r24
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <stateNextState+0x42a>
    15ec:	95 dd       	rcall	.-1238   	; 0x1118 <led2_yellow>
    15ee:	12 c0       	rjmp	.+36     	; 0x1614 <stateNextState+0x44e>
										 		{ led2_red();    	};
    15f0:	16 dd       	rcall	.-1492   	; 0x101e <led2_red>
    15f2:	10 c0       	rjmp	.+32     	; 0x1614 <stateNextState+0x44e>
			} else {
				if (fProgPwm2Soll > (0xff-8)) 	{ led1_white();  	} else
    15f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f6:	88 3f       	cpi	r24, 0xF8	; 248
    15f8:	10 f0       	brcs	.+4      	; 0x15fe <stateNextState+0x438>
    15fa:	c4 dd       	rcall	.-1144   	; 0x1184 <led1_white>
    15fc:	0b c0       	rjmp	.+22     	; 0x1614 <stateNextState+0x44e>
				if (fProgPwm2Soll > 100) 	 	{ led1_green(); 	} else
    15fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1600:	85 36       	cpi	r24, 0x65	; 101
    1602:	10 f0       	brcs	.+4      	; 0x1608 <stateNextState+0x442>
    1604:	2b dd       	rcall	.-1450   	; 0x105c <led1_green>
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <stateNextState+0x44e>
				if (fProgPwm2Soll > 0)        	{ led1_yellow();    } else
    1608:	8a 85       	ldd	r24, Y+10	; 0x0a
    160a:	88 23       	and	r24, r24
    160c:	11 f0       	breq	.+4      	; 0x1612 <stateNextState+0x44c>
    160e:	7a dd       	rcall	.-1292   	; 0x1104 <led1_yellow>
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <stateNextState+0x44e>
										 		{ led1_red();    	};
    1612:	fc dc       	rcall	.-1544   	; 0x100c <led1_red>
			}

			if (bit_is_set(fBtnCode, BTN1RELEASED)) {
    1614:	ce 01       	movw	r24, r28
    1616:	0b 96       	adiw	r24, 0x0b	; 11
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	88 70       	andi	r24, 0x08	; 8
    1622:	90 70       	andi	r25, 0x00	; 0
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	09 f4       	brne	.+2      	; 0x162a <stateNextState+0x464>
    1628:	c5 c0       	rjmp	.+394    	; 0x17b4 <stateNextState+0x5ee>
			
				//Taster lange gedrückt -> STARTUP
				if (bit_is_set(fBtnCode, BTN1LONGPRESSED)) {
    162a:	ce 01       	movw	r24, r28
    162c:	0b 96       	adiw	r24, 0x0b	; 11
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	82 70       	andi	r24, 0x02	; 2
    1638:	90 70       	andi	r25, 0x00	; 0
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	21 f0       	breq	.+8      	; 0x1646 <stateNextState+0x480>
					pwmTableStoreToEEPROM();
    163e:	d5 da       	rcall	.-2646   	; 0xbea <pwmTableStoreToEEPROM>
					nextState = IDLE;
    1640:	8e e1       	ldi	r24, 0x1E	; 30
    1642:	8c 83       	std	Y+4, r24	; 0x04
					break;
    1644:	c2 c0       	rjmp	.+388    	; 0x17ca <stateNextState+0x604>
				}

				//Taster kurz gedrückt -> Helligkeit erhöhen...
				if (0 == fProgOutputIndex) {
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	88 23       	and	r24, r24
    164a:	61 f4       	brne	.+24     	; 0x1664 <stateNextState+0x49e>
					fProgPwm1Soll = fProgPwm1Soll & 0xF8; //Letzte 3 bits löschen
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	88 7f       	andi	r24, 0xF8	; 248
    1650:	89 87       	std	Y+9, r24	; 0x09
					fProgPwm1Soll += 8;//Helligkeit erhöhen, 32 Stufen sollten reichen...
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	88 5f       	subi	r24, 0xF8	; 248
    1656:	89 87       	std	Y+9, r24	; 0x09

					pwmOutput.pwm1Soll = fProgPwm1Soll;
    1658:	89 85       	ldd	r24, Y+9	; 0x09
    165a:	80 93 f0 00 	sts	0x00F0, r24

					pwmTableSaveCurrentValuesForPWM1(fProgOutputDimLevel);
    165e:	8f 81       	ldd	r24, Y+7	; 0x07
    1660:	04 db       	rcall	.-2552   	; 0xc6a <pwmTableSaveCurrentValuesForPWM1>

				#ifdef DEBUG
					sendPWMTable();
				#endif
			} 
			break;
    1662:	b3 c0       	rjmp	.+358    	; 0x17ca <stateNextState+0x604>
					pwmOutput.pwm1Soll = fProgPwm1Soll;

					pwmTableSaveCurrentValuesForPWM1(fProgOutputDimLevel);

				} else {
					fProgPwm2Soll = fProgPwm2Soll & 0xF8;
    1664:	8a 85       	ldd	r24, Y+10	; 0x0a
    1666:	88 7f       	andi	r24, 0xF8	; 248
    1668:	8a 87       	std	Y+10, r24	; 0x0a
					fProgPwm2Soll += 8;
    166a:	8a 85       	ldd	r24, Y+10	; 0x0a
    166c:	88 5f       	subi	r24, 0xF8	; 248
    166e:	8a 87       	std	Y+10, r24	; 0x0a

					pwmOutput.pwm2Soll = fProgPwm2Soll;
    1670:	8a 85       	ldd	r24, Y+10	; 0x0a
    1672:	80 93 f2 00 	sts	0x00F2, r24

					pwmTableSaveCurrentValuesForPWM2(fProgOutputDimLevel);
    1676:	8f 81       	ldd	r24, Y+7	; 0x07
    1678:	27 db       	rcall	.-2482   	; 0xcc8 <pwmTableSaveCurrentValuesForPWM2>

				#ifdef DEBUG
					sendPWMTable();
				#endif
			} 
			break;
    167a:	a7 c0       	rjmp	.+334    	; 0x17ca <stateNextState+0x604>
		
		#ifdef CALIBRATION_ENABLED
		//************************************************************************************************************** 
		
		case CALIB_START : {
			led1Mode = LED_ON; led1_lightyellow();
    167c:	44 24       	eor	r4, r4
    167e:	43 94       	inc	r4
    1680:	55 dd       	rcall	.-1366   	; 0x112c <led1_lightyellow>
			led2Mode = LED_ON; led2_lightyellow();
    1682:	66 24       	eor	r6, r6
    1684:	63 94       	inc	r6
    1686:	5d dd       	rcall	.-1350   	; 0x1142 <led2_lightyellow>
			
			//Ausgänge auf Dimmstufe 3
			fDimLevel = 3;
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	89 83       	std	Y+1, r24	; 0x01
			pwmTableSetOutPut(fDimLevel);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	4a db       	rcall	.-2412   	; 0xd24 <pwmTableSetOutPut>
			pwmEnable();
    1690:	4d d9       	rcall	.-3430   	; 0x92c <pwmEnable>


			//10 Sekunden warten, bevor mit der Messung begonnen wird
			waitSecs = 10;
    1692:	8a e0       	ldi	r24, 0x0A	; 10
    1694:	8a 83       	std	Y+2, r24	; 0x02
			nextState = CALIB_WAIT_DIMUP;
    1696:	89 ec       	ldi	r24, 0xC9	; 201
    1698:	8c 83       	std	Y+4, r24	; 0x04
			break;
    169a:	97 c0       	rjmp	.+302    	; 0x17ca <stateNextState+0x604>
		} //CALIB_START

		//Wartezeit zum Lampe aufheizen
		case CALIB_WAIT_DIMUP : {
			//Wenn noch gewartet werden soll, raus hier...
			if (waitSecs) { break; }
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	88 23       	and	r24, r24
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <stateNextState+0x4de>
    16a2:	8a c0       	rjmp	.+276    	; 0x17b8 <stateNextState+0x5f2>
			
			//Zur Sicherheit word diese Funktion eingeführt:
			//Taster muss gedrückt gehalten werden, sonst gehts raus hier
			if (!bit_is_set(fBtnCode, BTN1PRESSING)) { 
    16a4:	ce 01       	movw	r24, r28
    16a6:	0b 96       	adiw	r24, 0x0b	; 11
    16a8:	fc 01       	movw	r30, r24
    16aa:	80 81       	ld	r24, Z
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	84 70       	andi	r24, 0x04	; 4
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	19 f4       	brne	.+6      	; 0x16be <stateNextState+0x4f8>
				nextState = IDLE; 
    16b8:	8e e1       	ldi	r24, 0x1E	; 30
    16ba:	8c 83       	std	Y+4, r24	; 0x04
				break;
    16bc:	86 c0       	rjmp	.+268    	; 0x17ca <stateNextState+0x604>
			};
	
			//leds kurz aus, CalibStart dauert etwas und die Ledanzeige würde komisches Zeug anzeigen
			leds_off(); rgbRefreshOutputs();
    16be:	9c dc       	rcall	.-1736   	; 0xff8 <leds_off>
    16c0:	b0 db       	rcall	.-2208   	; 0xe22 <rgbRefreshOutputs>

			//Kalibrierung vorbereiten
			calibStart();
    16c2:	25 d7       	rcall	.+3658   	; 0x250e <__data_load_end+0x7c6>
			
			//leds wieder an
			led1Mode = LED_ON; led1_white();
    16c4:	44 24       	eor	r4, r4
    16c6:	43 94       	inc	r4
    16c8:	5d dd       	rcall	.-1350   	; 0x1184 <led1_white>
			led2Mode = LED_ON; led2_white();
    16ca:	66 24       	eor	r6, r6
    16cc:	63 94       	inc	r6
    16ce:	65 dd       	rcall	.-1334   	; 0x119a <led2_white>

			nextState = CALIB_MESSURE_CYCLE;
    16d0:	8a ec       	ldi	r24, 0xCA	; 202
    16d2:	8c 83       	std	Y+4, r24	; 0x04

			break;
    16d4:	7a c0       	rjmp	.+244    	; 0x17ca <stateNextState+0x604>
		
		//Messzyklus - alle 2,5 Min eine Messung, bis Akku leer ist.
		case CALIB_MESSURE_CYCLE : {
			

			if (fBtnCode & (1<<BTN1RELEASED))
    16d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	88 70       	andi	r24, 0x08	; 8
    16de:	90 70       	andi	r25, 0x00	; 0
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	71 f0       	breq	.+28     	; 0x1700 <stateNextState+0x53a>
			{ 
				if (fDimLevel++ == 3) fDimLevel = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	99 81       	ldd	r25, Y+1	; 0x01
    16e8:	93 30       	cpi	r25, 0x03	; 3
    16ea:	09 f0       	breq	.+2      	; 0x16ee <stateNextState+0x528>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	99 81       	ldd	r25, Y+1	; 0x01
    16f0:	9f 5f       	subi	r25, 0xFF	; 255
    16f2:	99 83       	std	Y+1, r25	; 0x01
    16f4:	88 23       	and	r24, r24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <stateNextState+0x536>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	89 83       	std	Y+1, r24	; 0x01
				pwmTableSetOutPut(fDimLevel);
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	12 db       	rcall	.-2524   	; 0xd24 <pwmTableSetOutPut>
			}

			//Wenn noch gewartet werden soll, raus hier...
			if (waitSecs) { break; }
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	88 23       	and	r24, r24
    1704:	09 f0       	breq	.+2      	; 0x1708 <stateNextState+0x542>
    1706:	5a c0       	rjmp	.+180    	; 0x17bc <stateNextState+0x5f6>

			//Messung vornehmen
			calibAddAdcValue();
    1708:	24 d7       	rcall	.+3656   	; 0x2552 <__data_load_end+0x80a>
			sendCalibTable();
			#endif


			//Timer auf 2,5 min stellen
			waitSecs = 150;
    170a:	86 e9       	ldi	r24, 0x96	; 150
    170c:	8a 83       	std	Y+2, r24	; 0x02
			
			//Im gleichen Zustand verbleiben, bis der Akku leer ist.
			break;
    170e:	5d c0       	rjmp	.+186    	; 0x17ca <stateNextState+0x604>
		}
			
		#endif

		case RESET : {
			if (bit_is_set(fBtnCode, BTN1RELEASED)) {
    1710:	ce 01       	movw	r24, r28
    1712:	0b 96       	adiw	r24, 0x0b	; 11
    1714:	fc 01       	movw	r30, r24
    1716:	80 81       	ld	r24, Z
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	88 70       	andi	r24, 0x08	; 8
    171e:	90 70       	andi	r25, 0x00	; 0
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	09 f4       	brne	.+2      	; 0x1726 <stateNextState+0x560>
    1724:	4d c0       	rjmp	.+154    	; 0x17c0 <stateNextState+0x5fa>
			
				//Taster lange gedrückt -> IDLE
				if (bit_is_set(fBtnCode, BTN1LONGPRESSED)) {
    1726:	ce 01       	movw	r24, r28
    1728:	0b 96       	adiw	r24, 0x0b	; 11
    172a:	fc 01       	movw	r30, r24
    172c:	80 81       	ld	r24, Z
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	82 70       	andi	r24, 0x02	; 2
    1734:	90 70       	andi	r25, 0x00	; 0
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	09 f4       	brne	.+2      	; 0x173c <stateNextState+0x576>
    173a:	44 c0       	rjmp	.+136    	; 0x17c4 <stateNextState+0x5fe>
					leds_off();
    173c:	5d dc       	rcall	.-1862   	; 0xff8 <leds_off>

					//Warten bis Taster losgelassen wird
					loop_until_bit_is_set(BUTTON1_PINR, BUTTON1_PIN);
    173e:	89 e3       	ldi	r24, 0x39	; 57
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	80 71       	andi	r24, 0x10	; 16
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	b1 f3       	breq	.-20     	; 0x173e <stateNextState+0x578>

					pwmLoadDefaults();
    1752:	5a da       	rcall	.-2892   	; 0xc08 <pwmLoadDefaults>
					accuSetDefaultVoltageLevels();
    1754:	ef d4       	rcall	.+2526   	; 0x2134 <__data_load_end+0x3ec>
  					eepromStoreData(); 
    1756:	ab d8       	rcall	.-3754   	; 0x8ae <eepromStoreData>
					nextState = STARTUP;
    1758:	8a e0       	ldi	r24, 0x0A	; 10
    175a:	8c 83       	std	Y+4, r24	; 0x04
					break;
    175c:	36 c0       	rjmp	.+108    	; 0x17ca <stateNextState+0x604>
				led2Mode = LED_BLINK; led2_red();
			#elif 15 == VERSION
				led1Mode = LED_BLINK; led1_blue();
				led2Mode = LED_BLINK; led2_white();
			#elif 16 == VERSION
				led1Mode = LED_BLINK; led1_blue();
    175e:	44 24       	eor	r4, r4
    1760:	68 94       	set
    1762:	41 f8       	bld	r4, 1
    1764:	a5 dc       	rcall	.-1718   	; 0x10b0 <led1_blue>
				led2Mode = LED_BLINK; led2_rose();
    1766:	66 24       	eor	r6, r6
    1768:	68 94       	set
    176a:	61 f8       	bld	r6, 1
    176c:	00 dd       	rcall	.-1536   	; 0x116e <led2_rose>
			#else
				#error Konfig nachtragen!
			#endif

			if (waitSecs) break;
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	88 23       	and	r24, r24
    1772:	51 f5       	brne	.+84     	; 0x17c8 <stateNextState+0x602>

			nextState = STARTUP;
    1774:	8a e0       	ldi	r24, 0x0A	; 10
    1776:	8c 83       	std	Y+4, r24	; 0x04

			break;
    1778:	28 c0       	rjmp	.+80     	; 0x17ca <stateNextState+0x604>

		//************************************************************************************************************** 
		//Fehler beim Programmablauf
		case ERROR: {
			//PWM-Aus
			pwmDisable();
    177a:	14 d9       	rcall	.-3544   	; 0x9a4 <pwmDisable>
			//Beide LEDs blinken rot -> Zustand nicht mehr verlassen
			led1Mode = LED_BLINK; led1_red();
    177c:	44 24       	eor	r4, r4
    177e:	68 94       	set
    1780:	41 f8       	bld	r4, 1
    1782:	44 dc       	rcall	.-1912   	; 0x100c <led1_red>
			led2Mode = LED_BLINK; led2_red();
    1784:	66 24       	eor	r6, r6
    1786:	68 94       	set
    1788:	61 f8       	bld	r6, 1
    178a:	49 dc       	rcall	.-1902   	; 0x101e <led2_red>
			break;
    178c:	1e c0       	rjmp	.+60     	; 0x17ca <stateNextState+0x604>
		} // ERROR

		default: {
			nextState = ERROR;
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	8c 83       	std	Y+4, r24	; 0x04
    1792:	1b c0       	rjmp	.+54     	; 0x17ca <stateNextState+0x604>
			led2Mode = LED_ON;  led2_white();


			if (!waitSecs) { nextState = IDLE; };
			if ( fBtnCode) { nextState = IDLE; };
			break;
    1794:	00 00       	nop
    1796:	19 c0       	rjmp	.+50     	; 0x17ca <stateNextState+0x604>
			
			//In IDLE_WAIT gehts erst, wenn der Taster losgelassen ist
			if (0 == fBtnCode) {
				nextState = IDLE_WAIT;
			}
			break;
    1798:	00 00       	nop
    179a:	17 c0       	rjmp	.+46     	; 0x17ca <stateNextState+0x604>
					fDimLevel = transTableGetNextDimLevel(fDimLevel, fBtnCode);
					nextState = ACTIVE;
				}
			}
			
			break;
    179c:	00 00       	nop
    179e:	15 c0       	rjmp	.+42     	; 0x17ca <stateNextState+0x604>
			{ 
				fDimLevel = transTableGetNextDimLevel(fDimLevel, fBtnCode);
				ledsDimDown = 0;
				nextState = ACTIVE;
			}
			break;
    17a0:	00 00       	nop
    17a2:	13 c0       	rjmp	.+38     	; 0x17ca <stateNextState+0x604>
		*/
		case PROG_SELECT : {
			if (waitSecs) {
				if ((bit_is_clear(fBtnCode, BTN1PRESSING)) && (fProgSelect == 0))
					nextState = STARTUP;
				break;
    17a4:	00 00       	nop
    17a6:	11 c0       	rjmp	.+34     	; 0x17ca <stateNextState+0x604>
    17a8:	00 00       	nop
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <stateNextState+0x604>
				if (1 == fProgOutputDimLevel) { nextState = PROG_BRIGHTNESS_SET; 	break; };
				if (2 == fProgOutputDimLevel) { nextState = PROG_BRIGHTNESS_SET; 	break; };
				if (3 == fProgOutputDimLevel) { nextState = PROG_BRIGHTNESS_SET;	break; };
			}
			
			break;
    17ac:	00 00       	nop
    17ae:	0d c0       	rjmp	.+26     	; 0x17ca <stateNextState+0x604>
    17b0:	00 00       	nop
    17b2:	0b c0       	rjmp	.+22     	; 0x17ca <stateNextState+0x604>

				#ifdef DEBUG
					sendPWMTable();
				#endif
			} 
			break;
    17b4:	00 00       	nop
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <stateNextState+0x604>
		} //CALIB_START

		//Wartezeit zum Lampe aufheizen
		case CALIB_WAIT_DIMUP : {
			//Wenn noch gewartet werden soll, raus hier...
			if (waitSecs) { break; }
    17b8:	00 00       	nop
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <stateNextState+0x604>
				if (fDimLevel++ == 3) fDimLevel = 1;
				pwmTableSetOutPut(fDimLevel);
			}

			//Wenn noch gewartet werden soll, raus hier...
			if (waitSecs) { break; }
    17bc:	00 00       	nop
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <stateNextState+0x604>
					nextState = STARTUP;
					break;
				}
			}
			
			break;
    17c0:	00 00       	nop
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <stateNextState+0x604>
    17c4:	00 00       	nop
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <stateNextState+0x604>
				led2Mode = LED_BLINK; led2_rose();
			#else
				#error Konfig nachtragen!
			#endif

			if (waitSecs) break;
    17c8:	00 00       	nop

	} //end of case


	//ButtonCode auf 0 setzen -> Code wurde bearbeitet
	btnCode = 0;
    17ca:	10 92 d6 00 	sts	0x00D6, r1

	//globalen Werte übernehmen
	time.waitSecs = waitSecs;
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	80 93 f9 00 	sts	0x00F9, r24
	time.waitMins = waitMins;
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	80 93 fa 00 	sts	0x00FA, r24

	dimLevel = fDimLevel;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	80 93 d9 00 	sts	0x00D9, r24

	#ifdef PROGRAMMING_ENABLED
		progSelect 	= fProgSelect;
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	80 93 da 00 	sts	0x00DA, r24
		progOutputIndex = fProgOutputIndex;
    17e6:	8e 81       	ldd	r24, Y+6	; 0x06
    17e8:	80 93 db 00 	sts	0x00DB, r24
		progOutputDimLevel = fProgOutputDimLevel;
    17ec:	8f 81       	ldd	r24, Y+7	; 0x07
    17ee:	80 93 dc 00 	sts	0x00DC, r24
		if (state != nextState) {
			state = nextState;
			//sendControllerState();
		}
	#else
		state = nextState;
    17f2:	2c 80       	ldd	r2, Y+4	; 0x04
	#endif
}
    17f4:	2b 96       	adiw	r28, 0x0b	; 11
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <transTableGetNextDimLevel>:
	 /*3*/ 	2, 		1, 		2, 		0,
	};

//Folgezustand aus der Übergangstabelle holen
uint8_t transTableGetNextDimLevel(const uint8_t dimLevel, const uint8_t buttonCode)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <transTableGetNextDimLevel+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <transTableGetNextDimLevel+0x8>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t tableIndex = (dimLevel << 2); 
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	88 0f       	add	r24, r24
    181a:	88 0f       	add	r24, r24
    181c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t nextDimLevel = dimLevel;
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	8a 83       	std	Y+2, r24	; 0x02

	if (dimLevel > 3) return 0;
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	84 30       	cpi	r24, 0x04	; 4
    1826:	10 f0       	brcs	.+4      	; 0x182c <transTableGetNextDimLevel+0x26>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	3d c0       	rjmp	.+122    	; 0x18a6 <transTableGetNextDimLevel+0xa0>
	
	//Taster gedrückt
	if (bit_is_set(buttonCode, BTN1RELEASED))
    182c:	ce 01       	movw	r24, r28
    182e:	04 96       	adiw	r24, 0x04	; 4
    1830:	fc 01       	movw	r30, r24
    1832:	80 81       	ld	r24, Z
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	88 70       	andi	r24, 0x08	; 8
    183a:	90 70       	andi	r25, 0x00	; 0
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	79 f0       	breq	.+30     	; 0x185e <transTableGetNextDimLevel+0x58>
	{
		if (bit_is_set(buttonCode, BTN1SHORTPRESS)) 
    1840:	ce 01       	movw	r24, r28
    1842:	04 96       	adiw	r24, 0x04	; 4
    1844:	fc 01       	movw	r30, r24
    1846:	80 81       	ld	r24, Z
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	81 70       	andi	r24, 0x01	; 1
    184e:	90 70       	andi	r25, 0x00	; 0
    1850:	88 23       	and	r24, r24
    1852:	21 f4       	brne	.+8      	; 0x185c <transTableGetNextDimLevel+0x56>
			tableIndex = tableIndex + 0; 	//Kurz
		else 										
			tableIndex = tableIndex + 1; 	//Lang
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	01 c0       	rjmp	.+2      	; 0x185e <transTableGetNextDimLevel+0x58>
	
	//Taster gedrückt
	if (bit_is_set(buttonCode, BTN1RELEASED))
	{
		if (bit_is_set(buttonCode, BTN1SHORTPRESS)) 
			tableIndex = tableIndex + 0; 	//Kurz
    185c:	00 00       	nop
	#endif



	
	nextDimLevel = stateTransitionTable[tableIndex];
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	8d 53       	subi	r24, 0x3D	; 61
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	8a 83       	std	Y+2, r24	; 0x02

	//Wenn für Dimstufe 1 beide Ausgänge = 0 sind, dann wird diese Stufe weggelassen
	if (1 == nextDimLevel) {
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	c1 f4       	brne	.+48     	; 0x18a4 <transTableGetNextDimLevel+0x9e>
		if (0 == pwmTable[PWM_1_DIM_1]) {
    1874:	80 91 73 00 	lds	r24, 0x0073
    1878:	88 23       	and	r24, r24
    187a:	a1 f4       	brne	.+40     	; 0x18a4 <transTableGetNextDimLevel+0x9e>
			if ((!pwm2Enabled) | (0 == pwmTable[PWM_2_DIM_1])) {
    187c:	80 91 d8 00 	lds	r24, 0x00D8
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	88 23       	and	r24, r24
    1884:	09 f0       	breq	.+2      	; 0x1888 <transTableGetNextDimLevel+0x82>
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	20 91 75 00 	lds	r18, 0x0075
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	22 23       	and	r18, r18
    1890:	09 f0       	breq	.+2      	; 0x1894 <transTableGetNextDimLevel+0x8e>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	89 2b       	or	r24, r25
    1896:	88 23       	and	r24, r24
    1898:	29 f0       	breq	.+10     	; 0x18a4 <transTableGetNextDimLevel+0x9e>
				nextDimLevel = transTableGetNextDimLevel(nextDimLevel, buttonCode);
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	69 2f       	mov	r22, r25
    18a0:	b2 df       	rcall	.-156    	; 0x1806 <transTableGetNextDimLevel>
    18a2:	8a 83       	std	Y+2, r24	; 0x02
			}
		}
	}


	return nextDimLevel;
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <timerInitialize>:
 *
 *
 * 
 ***************************************************************************/
void timerInitialize(void)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
			Prescaler 1 (Takt = FPCU/0xFF = 31,25khz)			CS02:00=001

			Interupt bei Overflow
	*/

	TCCR0A = (0<<WGM01)|(0<<WGM00);
    18bc:	80 e5       	ldi	r24, 0x50	; 80
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	fc 01       	movw	r30, r24
    18c2:	10 82       	st	Z, r1
	TCCR0B = (1<<WGM02) | (0<<CS02)|(0<<CS01)|(1<<CS00);
    18c4:	83 e5       	ldi	r24, 0x53	; 83
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	29 e0       	ldi	r18, 0x09	; 9
    18ca:	fc 01       	movw	r30, r24
    18cc:	20 83       	st	Z, r18
	
	OCR0A = 0xFF;
    18ce:	86 e5       	ldi	r24, 0x56	; 86
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	2f ef       	ldi	r18, 0xFF	; 255
    18d4:	fc 01       	movw	r30, r24
    18d6:	20 83       	st	Z, r18

	TIMSK0 |= (1<<TOIE0); //Interrupt bei Overflow (0xff)
    18d8:	89 e5       	ldi	r24, 0x59	; 89
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	29 e5       	ldi	r18, 0x59	; 89
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	f9 01       	movw	r30, r18
    18e2:	20 81       	ld	r18, Z
    18e4:	21 60       	ori	r18, 0x01	; 1
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 83       	st	Z, r18

	//Laufzeitzähler für Zeitmessung
	time.sec 		= 0x00;
    18ea:	10 92 f7 00 	sts	0x00F7, r1
	time.min 		= 0x00;
    18ee:	10 92 f8 00 	sts	0x00F8, r1
	time.waitSecs	= 0x00;
    18f2:	10 92 f9 00 	sts	0x00F9, r1
	time.waitMins	= 0x00;
    18f6:	10 92 fa 00 	sts	0x00FA, r1
	time.softPwmCnt = 0x00;
    18fa:	10 92 fb 00 	sts	0x00FB, r1
	time.t_count 	= TIMER_CLK_COUNT;
    18fe:	81 e4       	ldi	r24, 0x41	; 65
    1900:	9c e0       	ldi	r25, 0x0C	; 12
    1902:	90 93 f5 00 	sts	0x00F5, r25
    1906:	80 93 f4 00 	sts	0x00F4, r24
	
	//Timerflags setzen, damit am Anfang alle Methoden einmal ausgeführt werden
//	timerFlags = (1<<TF_MINUTE)|(1 <<TF_SECOND)|(1<<TF_10SSECOND);  - not in use
	timerFlags = (1 <<TF_SECOND)|(1<<TF_10SSECOND);
    190a:	8c e0       	ldi	r24, 0x0C	; 12
    190c:	80 93 dd 00 	sts	0x00DD, r24
}
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <__vector_11>:
/*
	Timer 0 - Overflow-Interrupt
	Zähler für Zeitmessungen
*/
ISR(TIM0_OVF_vect) 
{
    1916:	1f 92       	push	r1
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <__vector_11+0x14>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	//sehr oft geschriebene Werte kommen in Register kopieren
	uint8_t sec10 		= time.sec10;
    192e:	80 91 f6 00 	lds	r24, 0x00F6
    1932:	89 83       	std	Y+1, r24	; 0x01
	uint8_t fTimerFlags = timerFlags;
    1934:	80 91 dd 00 	lds	r24, 0x00DD
    1938:	8a 83       	std	Y+2, r24	; 0x02

	if (0x00 == --time.t_count)
    193a:	80 91 f4 00 	lds	r24, 0x00F4
    193e:	90 91 f5 00 	lds	r25, 0x00F5
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	90 93 f5 00 	sts	0x00F5, r25
    1948:	80 93 f4 00 	sts	0x00F4, r24
    194c:	80 91 f4 00 	lds	r24, 0x00F4
    1950:	90 91 f5 00 	lds	r25, 0x00F5
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	a9 f5       	brne	.+106    	; 0x19c2 <__vector_11+0xac>
	{     
		fTimerFlags |= (1<<TF_10SSECOND);
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	88 60       	ori	r24, 0x08	; 8
    195c:	8a 83       	std	Y+2, r24	; 0x02
		
		//Zehntel-Sekunden hochzählen
		if (TIMER_CLK_SEC_PART == ++sec10)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	8a 30       	cpi	r24, 0x0A	; 10
    1968:	31 f5       	brne	.+76     	; 0x19b6 <__vector_11+0xa0>
		{
			fTimerFlags |= (1<<TF_SECOND);
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	84 60       	ori	r24, 0x04	; 4
    196e:	8a 83       	std	Y+2, r24	; 0x02
			
			//Wenn waitSecs gesetzt, wird dieser runtergezählt
			if (time.waitSecs)
    1970:	80 91 f9 00 	lds	r24, 0x00F9
    1974:	88 23       	and	r24, r24
    1976:	29 f0       	breq	.+10     	; 0x1982 <__vector_11+0x6c>
			{
				time.waitSecs--;
    1978:	80 91 f9 00 	lds	r24, 0x00F9
    197c:	81 50       	subi	r24, 0x01	; 1
    197e:	80 93 f9 00 	sts	0x00F9, r24
			}		
			
			//Sekunden hochzählen
			if ( 60 == ++time.sec )
    1982:	80 91 f7 00 	lds	r24, 0x00F7
    1986:	8f 5f       	subi	r24, 0xFF	; 255
    1988:	80 93 f7 00 	sts	0x00F7, r24
    198c:	80 91 f7 00 	lds	r24, 0x00F7
    1990:	8c 33       	cpi	r24, 0x3C	; 60
    1992:	81 f4       	brne	.+32     	; 0x19b4 <__vector_11+0x9e>
			{
				
				//Wenn waitMins gesetzt, wird dieser runtergezählt
				if (time.waitMins)
    1994:	80 91 fa 00 	lds	r24, 0x00FA
    1998:	88 23       	and	r24, r24
    199a:	29 f0       	breq	.+10     	; 0x19a6 <__vector_11+0x90>
				{
					time.waitMins--;
    199c:	80 91 fa 00 	lds	r24, 0x00FA
    19a0:	81 50       	subi	r24, 0x01	; 1
    19a2:	80 93 fa 00 	sts	0x00FA, r24
				}		

				//Minuten hochzählen
				++time.min;
    19a6:	80 91 f8 00 	lds	r24, 0x00F8
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	80 93 f8 00 	sts	0x00F8, r24
		    	time.sec = 0x00;       
    19b0:	10 92 f7 00 	sts	0x00F7, r1
			}   
			sec10 = 0x00;
    19b4:	19 82       	std	Y+1, r1	; 0x01
		}
		// Counter rücksetzen   
		time.t_count = TIMER_CLK_COUNT;          
    19b6:	81 e4       	ldi	r24, 0x41	; 65
    19b8:	9c e0       	ldi	r25, 0x0C	; 12
    19ba:	90 93 f5 00 	sts	0x00F5, r25
    19be:	80 93 f4 00 	sts	0x00F4, r24
	}
	time.softPwmCnt++;
    19c2:	80 91 fb 00 	lds	r24, 0x00FB
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	80 93 fb 00 	sts	0x00FB, r24
	time.sec10 		= sec10;
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	80 93 f6 00 	sts	0x00F6, r24
	timerFlags 		= fTimerFlags;
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	80 93 dd 00 	sts	0x00DD, r24
} 
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <__cmpsf2>:
    19ee:	2f d0       	rcall	.+94     	; 0x1a4e <__fp_cmp>
    19f0:	08 f4       	brcc	.+2      	; 0x19f4 <__cmpsf2+0x6>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	08 95       	ret

000019f6 <__fixunssfsi>:
    19f6:	57 d0       	rcall	.+174    	; 0x1aa6 <__fp_splitA>
    19f8:	88 f0       	brcs	.+34     	; 0x1a1c <__fixunssfsi+0x26>
    19fa:	9f 57       	subi	r25, 0x7F	; 127
    19fc:	90 f0       	brcs	.+36     	; 0x1a22 <__fixunssfsi+0x2c>
    19fe:	b9 2f       	mov	r27, r25
    1a00:	99 27       	eor	r25, r25
    1a02:	b7 51       	subi	r27, 0x17	; 23
    1a04:	a0 f0       	brcs	.+40     	; 0x1a2e <__fixunssfsi+0x38>
    1a06:	d1 f0       	breq	.+52     	; 0x1a3c <__fixunssfsi+0x46>
    1a08:	66 0f       	add	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	1a f0       	brmi	.+6      	; 0x1a18 <__fixunssfsi+0x22>
    1a12:	ba 95       	dec	r27
    1a14:	c9 f7       	brne	.-14     	; 0x1a08 <__fixunssfsi+0x12>
    1a16:	12 c0       	rjmp	.+36     	; 0x1a3c <__fixunssfsi+0x46>
    1a18:	b1 30       	cpi	r27, 0x01	; 1
    1a1a:	81 f0       	breq	.+32     	; 0x1a3c <__fixunssfsi+0x46>
    1a1c:	5e d0       	rcall	.+188    	; 0x1ada <__fp_zero>
    1a1e:	b1 e0       	ldi	r27, 0x01	; 1
    1a20:	08 95       	ret
    1a22:	5b c0       	rjmp	.+182    	; 0x1ada <__fp_zero>
    1a24:	67 2f       	mov	r22, r23
    1a26:	78 2f       	mov	r23, r24
    1a28:	88 27       	eor	r24, r24
    1a2a:	b8 5f       	subi	r27, 0xF8	; 248
    1a2c:	39 f0       	breq	.+14     	; 0x1a3c <__fixunssfsi+0x46>
    1a2e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a30:	cc f3       	brlt	.-14     	; 0x1a24 <__fixunssfsi+0x2e>
    1a32:	86 95       	lsr	r24
    1a34:	77 95       	ror	r23
    1a36:	67 95       	ror	r22
    1a38:	b3 95       	inc	r27
    1a3a:	d9 f7       	brne	.-10     	; 0x1a32 <__fixunssfsi+0x3c>
    1a3c:	3e f4       	brtc	.+14     	; 0x1a4c <__fixunssfsi+0x56>
    1a3e:	90 95       	com	r25
    1a40:	80 95       	com	r24
    1a42:	70 95       	com	r23
    1a44:	61 95       	neg	r22
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	08 95       	ret

00001a4e <__fp_cmp>:
    1a4e:	99 0f       	add	r25, r25
    1a50:	00 08       	sbc	r0, r0
    1a52:	55 0f       	add	r21, r21
    1a54:	aa 0b       	sbc	r26, r26
    1a56:	e0 e8       	ldi	r30, 0x80	; 128
    1a58:	fe ef       	ldi	r31, 0xFE	; 254
    1a5a:	16 16       	cp	r1, r22
    1a5c:	17 06       	cpc	r1, r23
    1a5e:	e8 07       	cpc	r30, r24
    1a60:	f9 07       	cpc	r31, r25
    1a62:	c0 f0       	brcs	.+48     	; 0x1a94 <__fp_cmp+0x46>
    1a64:	12 16       	cp	r1, r18
    1a66:	13 06       	cpc	r1, r19
    1a68:	e4 07       	cpc	r30, r20
    1a6a:	f5 07       	cpc	r31, r21
    1a6c:	98 f0       	brcs	.+38     	; 0x1a94 <__fp_cmp+0x46>
    1a6e:	62 1b       	sub	r22, r18
    1a70:	73 0b       	sbc	r23, r19
    1a72:	84 0b       	sbc	r24, r20
    1a74:	95 0b       	sbc	r25, r21
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <__fp_cmp+0x38>
    1a78:	0a 26       	eor	r0, r26
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <__fp_cmp+0x46>
    1a7c:	23 2b       	or	r18, r19
    1a7e:	24 2b       	or	r18, r20
    1a80:	25 2b       	or	r18, r21
    1a82:	21 f4       	brne	.+8      	; 0x1a8c <__fp_cmp+0x3e>
    1a84:	08 95       	ret
    1a86:	0a 26       	eor	r0, r26
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__fp_cmp+0x3e>
    1a8a:	a1 40       	sbci	r26, 0x01	; 1
    1a8c:	a6 95       	lsr	r26
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	81 1d       	adc	r24, r1
    1a92:	81 1d       	adc	r24, r1
    1a94:	08 95       	ret

00001a96 <__fp_split3>:
    1a96:	57 fd       	sbrc	r21, 7
    1a98:	90 58       	subi	r25, 0x80	; 128
    1a9a:	44 0f       	add	r20, r20
    1a9c:	55 1f       	adc	r21, r21
    1a9e:	59 f0       	breq	.+22     	; 0x1ab6 <__fp_splitA+0x10>
    1aa0:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa2:	71 f0       	breq	.+28     	; 0x1ac0 <__fp_splitA+0x1a>
    1aa4:	47 95       	ror	r20

00001aa6 <__fp_splitA>:
    1aa6:	88 0f       	add	r24, r24
    1aa8:	97 fb       	bst	r25, 7
    1aaa:	99 1f       	adc	r25, r25
    1aac:	61 f0       	breq	.+24     	; 0x1ac6 <__fp_splitA+0x20>
    1aae:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab0:	79 f0       	breq	.+30     	; 0x1ad0 <__fp_splitA+0x2a>
    1ab2:	87 95       	ror	r24
    1ab4:	08 95       	ret
    1ab6:	12 16       	cp	r1, r18
    1ab8:	13 06       	cpc	r1, r19
    1aba:	14 06       	cpc	r1, r20
    1abc:	55 1f       	adc	r21, r21
    1abe:	f2 cf       	rjmp	.-28     	; 0x1aa4 <__fp_split3+0xe>
    1ac0:	46 95       	lsr	r20
    1ac2:	f1 df       	rcall	.-30     	; 0x1aa6 <__fp_splitA>
    1ac4:	08 c0       	rjmp	.+16     	; 0x1ad6 <__fp_splitA+0x30>
    1ac6:	16 16       	cp	r1, r22
    1ac8:	17 06       	cpc	r1, r23
    1aca:	18 06       	cpc	r1, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	f1 cf       	rjmp	.-30     	; 0x1ab2 <__fp_splitA+0xc>
    1ad0:	86 95       	lsr	r24
    1ad2:	71 05       	cpc	r23, r1
    1ad4:	61 05       	cpc	r22, r1
    1ad6:	08 94       	sec
    1ad8:	08 95       	ret

00001ada <__fp_zero>:
    1ada:	e8 94       	clt

00001adc <__fp_szero>:
    1adc:	bb 27       	eor	r27, r27
    1ade:	66 27       	eor	r22, r22
    1ae0:	77 27       	eor	r23, r23
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	97 f9       	bld	r25, 7
    1ae6:	08 95       	ret

00001ae8 <__gesf2>:
    1ae8:	b2 df       	rcall	.-156    	; 0x1a4e <__fp_cmp>
    1aea:	08 f4       	brcc	.+2      	; 0x1aee <__gesf2+0x6>
    1aec:	8f ef       	ldi	r24, 0xFF	; 255
    1aee:	08 95       	ret

00001af0 <__mulsf3>:
    1af0:	0a d0       	rcall	.+20     	; 0x1b06 <__mulsf3x>
    1af2:	80 c0       	rjmp	.+256    	; 0x1bf4 <__fp_round>
    1af4:	71 d0       	rcall	.+226    	; 0x1bd8 <__fp_pscA>
    1af6:	28 f0       	brcs	.+10     	; 0x1b02 <__mulsf3+0x12>
    1af8:	76 d0       	rcall	.+236    	; 0x1be6 <__fp_pscB>
    1afa:	18 f0       	brcs	.+6      	; 0x1b02 <__mulsf3+0x12>
    1afc:	95 23       	and	r25, r21
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <__mulsf3+0x12>
    1b00:	62 c0       	rjmp	.+196    	; 0x1bc6 <__fp_inf>
    1b02:	67 c0       	rjmp	.+206    	; 0x1bd2 <__fp_nan>
    1b04:	eb cf       	rjmp	.-42     	; 0x1adc <__fp_szero>

00001b06 <__mulsf3x>:
    1b06:	c7 df       	rcall	.-114    	; 0x1a96 <__fp_split3>
    1b08:	a8 f3       	brcs	.-22     	; 0x1af4 <__mulsf3+0x4>

00001b0a <__mulsf3_pse>:
    1b0a:	99 23       	and	r25, r25
    1b0c:	d9 f3       	breq	.-10     	; 0x1b04 <__mulsf3+0x14>
    1b0e:	55 23       	and	r21, r21
    1b10:	c9 f3       	breq	.-14     	; 0x1b04 <__mulsf3+0x14>
    1b12:	95 0f       	add	r25, r21
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	55 1f       	adc	r21, r21
    1b18:	aa 27       	eor	r26, r26
    1b1a:	ee 27       	eor	r30, r30
    1b1c:	ff 27       	eor	r31, r31
    1b1e:	bb 27       	eor	r27, r27
    1b20:	00 24       	eor	r0, r0
    1b22:	08 94       	sec
    1b24:	67 95       	ror	r22
    1b26:	20 f4       	brcc	.+8      	; 0x1b30 <__mulsf3_pse+0x26>
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	b4 1f       	adc	r27, r20
    1b2e:	0a 1e       	adc	r0, r26
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	44 1f       	adc	r20, r20
    1b36:	aa 1f       	adc	r26, r26
    1b38:	66 95       	lsr	r22
    1b3a:	a9 f7       	brne	.-22     	; 0x1b26 <__mulsf3_pse+0x1c>
    1b3c:	77 95       	ror	r23
    1b3e:	30 f4       	brcc	.+12     	; 0x1b4c <__mulsf3_pse+0x42>
    1b40:	f3 0f       	add	r31, r19
    1b42:	b4 1f       	adc	r27, r20
    1b44:	0a 1e       	adc	r0, r26
    1b46:	12 1e       	adc	r1, r18
    1b48:	08 f4       	brcc	.+2      	; 0x1b4c <__mulsf3_pse+0x42>
    1b4a:	63 95       	inc	r22
    1b4c:	33 0f       	add	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	aa 1f       	adc	r26, r26
    1b52:	22 1f       	adc	r18, r18
    1b54:	76 95       	lsr	r23
    1b56:	99 f7       	brne	.-26     	; 0x1b3e <__mulsf3_pse+0x34>
    1b58:	87 95       	ror	r24
    1b5a:	20 f4       	brcc	.+8      	; 0x1b64 <__mulsf3_pse+0x5a>
    1b5c:	b4 0f       	add	r27, r20
    1b5e:	0a 1e       	adc	r0, r26
    1b60:	12 1e       	adc	r1, r18
    1b62:	63 1f       	adc	r22, r19
    1b64:	44 0f       	add	r20, r20
    1b66:	aa 1f       	adc	r26, r26
    1b68:	22 1f       	adc	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	86 95       	lsr	r24
    1b6e:	a9 f7       	brne	.-22     	; 0x1b5a <__mulsf3_pse+0x50>
    1b70:	86 2f       	mov	r24, r22
    1b72:	71 2d       	mov	r23, r1
    1b74:	60 2d       	mov	r22, r0
    1b76:	11 24       	eor	r1, r1
    1b78:	9f 57       	subi	r25, 0x7F	; 127
    1b7a:	50 40       	sbci	r21, 0x00	; 0
    1b7c:	8a f0       	brmi	.+34     	; 0x1ba0 <__mulsf3_pse+0x96>
    1b7e:	e1 f0       	breq	.+56     	; 0x1bb8 <__mulsf3_pse+0xae>
    1b80:	88 23       	and	r24, r24
    1b82:	4a f0       	brmi	.+18     	; 0x1b96 <__mulsf3_pse+0x8c>
    1b84:	ee 0f       	add	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	66 1f       	adc	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	88 1f       	adc	r24, r24
    1b90:	91 50       	subi	r25, 0x01	; 1
    1b92:	50 40       	sbci	r21, 0x00	; 0
    1b94:	a9 f7       	brne	.-22     	; 0x1b80 <__mulsf3_pse+0x76>
    1b96:	9e 3f       	cpi	r25, 0xFE	; 254
    1b98:	51 05       	cpc	r21, r1
    1b9a:	70 f0       	brcs	.+28     	; 0x1bb8 <__mulsf3_pse+0xae>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <__fp_inf>
    1b9e:	9e cf       	rjmp	.-196    	; 0x1adc <__fp_szero>
    1ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba2:	ec f3       	brlt	.-6      	; 0x1b9e <__mulsf3_pse+0x94>
    1ba4:	98 3e       	cpi	r25, 0xE8	; 232
    1ba6:	dc f3       	brlt	.-10     	; 0x1b9e <__mulsf3_pse+0x94>
    1ba8:	86 95       	lsr	r24
    1baa:	77 95       	ror	r23
    1bac:	67 95       	ror	r22
    1bae:	b7 95       	ror	r27
    1bb0:	f7 95       	ror	r31
    1bb2:	e7 95       	ror	r30
    1bb4:	9f 5f       	subi	r25, 0xFF	; 255
    1bb6:	c1 f7       	brne	.-16     	; 0x1ba8 <__mulsf3_pse+0x9e>
    1bb8:	fe 2b       	or	r31, r30
    1bba:	88 0f       	add	r24, r24
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	96 95       	lsr	r25
    1bc0:	87 95       	ror	r24
    1bc2:	97 f9       	bld	r25, 7
    1bc4:	08 95       	ret

00001bc6 <__fp_inf>:
    1bc6:	97 f9       	bld	r25, 7
    1bc8:	9f 67       	ori	r25, 0x7F	; 127
    1bca:	80 e8       	ldi	r24, 0x80	; 128
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	08 95       	ret

00001bd2 <__fp_nan>:
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	80 ec       	ldi	r24, 0xC0	; 192
    1bd6:	08 95       	ret

00001bd8 <__fp_pscA>:
    1bd8:	00 24       	eor	r0, r0
    1bda:	0a 94       	dec	r0
    1bdc:	16 16       	cp	r1, r22
    1bde:	17 06       	cpc	r1, r23
    1be0:	18 06       	cpc	r1, r24
    1be2:	09 06       	cpc	r0, r25
    1be4:	08 95       	ret

00001be6 <__fp_pscB>:
    1be6:	00 24       	eor	r0, r0
    1be8:	0a 94       	dec	r0
    1bea:	12 16       	cp	r1, r18
    1bec:	13 06       	cpc	r1, r19
    1bee:	14 06       	cpc	r1, r20
    1bf0:	05 06       	cpc	r0, r21
    1bf2:	08 95       	ret

00001bf4 <__fp_round>:
    1bf4:	09 2e       	mov	r0, r25
    1bf6:	03 94       	inc	r0
    1bf8:	00 0c       	add	r0, r0
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <__fp_round+0xc>
    1bfc:	88 23       	and	r24, r24
    1bfe:	52 f0       	brmi	.+20     	; 0x1c14 <__fp_round+0x20>
    1c00:	bb 0f       	add	r27, r27
    1c02:	40 f4       	brcc	.+16     	; 0x1c14 <__fp_round+0x20>
    1c04:	bf 2b       	or	r27, r31
    1c06:	11 f4       	brne	.+4      	; 0x1c0c <__fp_round+0x18>
    1c08:	60 ff       	sbrs	r22, 0
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <__fp_round+0x20>
    1c0c:	6f 5f       	subi	r22, 0xFF	; 255
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	08 95       	ret

00001c16 <__mulhi3>:
    1c16:	55 27       	eor	r21, r21
    1c18:	00 24       	eor	r0, r0

00001c1a <__mulhi3_loop>:
    1c1a:	80 ff       	sbrs	r24, 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <__mulhi3_skip1>
    1c1e:	06 0e       	add	r0, r22
    1c20:	57 1f       	adc	r21, r23

00001c22 <__mulhi3_skip1>:
    1c22:	66 0f       	add	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	61 15       	cp	r22, r1
    1c28:	71 05       	cpc	r23, r1
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <__mulhi3_exit>
    1c2c:	96 95       	lsr	r25
    1c2e:	87 95       	ror	r24
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	99 f7       	brne	.-26     	; 0x1c1a <__mulhi3_loop>

00001c34 <__mulhi3_exit>:
    1c34:	95 2f       	mov	r25, r21
    1c36:	80 2d       	mov	r24, r0
    1c38:	08 95       	ret

00001c3a <__udivmodhi4>:
    1c3a:	aa 1b       	sub	r26, r26
    1c3c:	bb 1b       	sub	r27, r27
    1c3e:	51 e1       	ldi	r21, 0x11	; 17
    1c40:	07 c0       	rjmp	.+14     	; 0x1c50 <__udivmodhi4_ep>

00001c42 <__udivmodhi4_loop>:
    1c42:	aa 1f       	adc	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	a6 17       	cp	r26, r22
    1c48:	b7 07       	cpc	r27, r23
    1c4a:	10 f0       	brcs	.+4      	; 0x1c50 <__udivmodhi4_ep>
    1c4c:	a6 1b       	sub	r26, r22
    1c4e:	b7 0b       	sbc	r27, r23

00001c50 <__udivmodhi4_ep>:
    1c50:	88 1f       	adc	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	5a 95       	dec	r21
    1c56:	a9 f7       	brne	.-22     	; 0x1c42 <__udivmodhi4_loop>
    1c58:	80 95       	com	r24
    1c5a:	90 95       	com	r25
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	08 95       	ret

00001c62 <__eerd_block_tn84>:
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22

00001c66 <__eerd_blraw_tn84>:
    1c66:	fc 01       	movw	r30, r24
    1c68:	e1 99       	sbic	0x1c, 1	; 28
    1c6a:	fe cf       	rjmp	.-4      	; 0x1c68 <__eerd_blraw_tn84+0x2>
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <__eerd_blraw_tn84+0x14>
    1c6e:	ff bb       	out	0x1f, r31	; 31
    1c70:	ee bb       	out	0x1e, r30	; 30
    1c72:	e0 9a       	sbi	0x1c, 0	; 28
    1c74:	31 96       	adiw	r30, 0x01	; 1
    1c76:	0d b2       	in	r0, 0x1d	; 29
    1c78:	0d 92       	st	X+, r0
    1c7a:	41 50       	subi	r20, 0x01	; 1
    1c7c:	50 40       	sbci	r21, 0x00	; 0
    1c7e:	b8 f7       	brcc	.-18     	; 0x1c6e <__eerd_blraw_tn84+0x8>
    1c80:	08 95       	ret

00001c82 <__eerd_byte_tn84>:
    1c82:	e1 99       	sbic	0x1c, 1	; 28
    1c84:	fe cf       	rjmp	.-4      	; 0x1c82 <__eerd_byte_tn84>
    1c86:	9f bb       	out	0x1f, r25	; 31
    1c88:	8e bb       	out	0x1e, r24	; 30
    1c8a:	e0 9a       	sbi	0x1c, 0	; 28
    1c8c:	99 27       	eor	r25, r25
    1c8e:	8d b3       	in	r24, 0x1d	; 29
    1c90:	08 95       	ret

00001c92 <__eerd_word_tn84>:
    1c92:	a8 e1       	ldi	r26, 0x18	; 24
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	42 e0       	ldi	r20, 0x02	; 2
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	e5 cf       	rjmp	.-54     	; 0x1c66 <__eerd_blraw_tn84>

00001c9c <__eewr_block_tn84>:
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <__eewr_block_tn84+0xa>
    1ca2:	2d 91       	ld	r18, X+
    1ca4:	05 d0       	rcall	.+10     	; 0x1cb0 <__eewr_r18_tn84>
    1ca6:	41 50       	subi	r20, 0x01	; 1
    1ca8:	50 40       	sbci	r21, 0x00	; 0
    1caa:	d8 f7       	brcc	.-10     	; 0x1ca2 <__eewr_block_tn84+0x6>
    1cac:	08 95       	ret

00001cae <__eewr_byte_tn84>:
    1cae:	26 2f       	mov	r18, r22

00001cb0 <__eewr_r18_tn84>:
    1cb0:	e1 99       	sbic	0x1c, 1	; 28
    1cb2:	fe cf       	rjmp	.-4      	; 0x1cb0 <__eewr_r18_tn84>
    1cb4:	1c ba       	out	0x1c, r1	; 28
    1cb6:	9f bb       	out	0x1f, r25	; 31
    1cb8:	8e bb       	out	0x1e, r24	; 30
    1cba:	2d bb       	out	0x1d, r18	; 29
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	e2 9a       	sbi	0x1c, 2	; 28
    1cc2:	e1 9a       	sbi	0x1c, 1	; 28
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	08 95       	ret

00001cca <__eewr_word_tn84>:
    1cca:	f1 df       	rcall	.-30     	; 0x1cae <__eewr_byte_tn84>
    1ccc:	27 2f       	mov	r18, r23
    1cce:	f0 cf       	rjmp	.-32     	; 0x1cb0 <__eewr_r18_tn84>

00001cd0 <_exit>:
    1cd0:	f8 94       	cli

00001cd2 <__stop_program>:
    1cd2:	ff cf       	rjmp	.-2      	; 0x1cd2 <__stop_program>
