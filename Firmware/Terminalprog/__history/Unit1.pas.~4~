unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, CPort, CPortCtl, ActnList, ImgList, Buttons;

type
  TForm1 = class(TForm)
    mMessages: TMemo;
    cmprtComPort: TComPort;
    cbbBaudRate: TComComboBox;
    cbbPort: TComComboBox;
    btnComConnect: TBitBtn;
    ilImages: TImageList;
    lblSerialPort: TLabel;
    actlst1: TActionList;
    actComPortSettings: TAction;
    actComConnect: TAction;
    actComDisconnect: TAction;
    actRacerAdd: TAction;
    actRacerRemove: TAction;
    actActiveRacerAdd: TAction;
    actActiveRacerRemove: TAction;
    actFolder: TAction;
    actShowRaceWindow: TAction;
    actShowAbout: TAction;
    actRacersLoad: TAction;
    actRacersSave: TAction;
    actRaceStart: TAction;
    actRaceStop: TAction;
    procedure SerialPortNG1CommEvent(Sender: TObject);
    procedure btnConnectClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure cmprtComPortAfterClose(Sender: TObject);
    procedure cmprtComPortAfterOpen(Sender: TObject);
    procedure cmprtComPortBeforeOpen(Sender: TObject);
  private
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.SerialPortNG1CommEvent(Sender: TObject);
var
  s1, ReceivedText: String;
  p , ad1, ad2, ad3: Integer;

begin
  ReceivedText := SerialPortNG1. ReadNextClusterAsString;
  if Length(ReceivedText) = 0 then Exit;

  p := Pos(#$D#$A, ReceivedText);
  while (p > 0) do
  begin
        s1 := Copy(ReceivedText, 0, p-1);
        Memo1.Lines.Add(Format('%s, %s, %s', [DateToStr(Now), TimeToStr(Now), s1]));
        ReceivedText := Copy(ReceivedText, p+2, Length(ReceivedText)-p-2);

        p := Pos(#$D#$A, ReceivedText);

  end;
end;

procedure TForm1.btnConnectClick(Sender: TObject);
begin
  SerialPortNG1.Active := True;
  Memo1.Clear;
  Memo1.Lines.Add('Protokoll started...');
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  SerialPortNG1.Active := False;

end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  memo1.Clear;
end;

procedure TForm1.cmprtComPortAfterClose(Sender: TObject);
begin
        btnComConnect.Action := actComConnect;
     mMessages.Lines.Add(Format('Serial Port <%s> closed.', [Trim(cmprtComPort.Port)]));
end;

procedure TForm1.cmprtComPortAfterOpen(Sender: TObject);
begin
     btnComConnect.Action := actComDisconnect;
     mMessages.Lines.Add(Format('Serial Port <%s> opened.', [Trim(cmprtComPort.Port)]));

end;

procedure TForm1.cmprtComPortBeforeOpen(Sender: TObject);
begin
        mMessages.Lines.Add(Format('Opening <%s> ...', [Trim(cmprtComPort.Port)]));
end;

end.
